# This playbook will validate exports on softnas and mount those with the /etc/fstab file.

# to update a workstation after altering any softnas mounts for the first time use the command -
# ansible-playbook -i ansible/inventory ansible/node-centos-mounts.yaml --extra-vars "variable_host=role_workstation_centos hostname=workstation1.$TF_VAR_public_domain pcoip=true"
# to update a render node, just use -
# ansible-playbook -i ansible/inventory ansible/node-centos-mounts.yaml


# check exports on softnas.
- hosts: role_softnas
  remote_user: centos
  become_user: root
  become: true

  vars:
    # when paths are found at these locations, they will be added to exports.
    exports:
      - path: "/pool1/volume1/"
        pool_name: pool1
        volume_name: volume1
        state: present
        bind: /prod

    import_pool: true

  tasks:
  - name: Check for existance of custom exports in /vagrant/secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml and override default mounts
    stat:
      path: ../secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml
    register: custom_ebs_list
    connection: local

  - name: Override default exports
    include_vars:
      file: ../secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml
    when: custom_ebs_list.stat.exists
    connection: local

  - name: exports
    debug:
      var: item
    with_items: "{{ exports }}"

  - name: Check whether /etc/exports contains the mount
    command: grep -E "^\/{{ item.pool_name }}\/{{ item.volume_name }}.*" /etc/exports
    register: presence
    check_mode: no
    ignore_errors: yes
    changed_when: no
    with_items: "{{ exports }}"

  - name: export existance test
    debug:
      var: item
    when: item.rc == 0
    with_items: "{{ presence.results }}"

  - name: export output always
    set_fact: exported_softnas_mounts="{{item}}"
    with_items: "{{ presence.results }}"

# update fstab with valid mounts
- hosts: "{{ variable_host | default('role_node_centos') }}"
  remote_user: "{{ variable_user | default('centos') }}"
  become: true

  vars:
    softnas_exports: "{{ hostvars[groups['role_softnas'][0]]['presence']['results'] }}"
    hostname: "node1.{{ public_domain }}"
    pcoip: False

  tasks:
  - name: exports to mount to this instance
    debug:
      var: item
    with_items: 
    - "{{ softnas_exports }}"

  - name: create mount directories
    file: 
      path: "{{ item.item.path }}"
      state: directory
      owner: deadlineuser
      group: deadlineuser
    when: item.rc == 0
    with_items: 
    - "{{ softnas_exports }}"

  - name: create bind1 directories
    file: 
      path: "{{ item.item.bind1 }}"
      state: directory
      owner: deadlineuser
      group: deadlineuser
    when: item.item.bind1 and item.rc == 0
    with_items: 
    - "{{ softnas_exports }}"

  - name: create bind2 directories
    file: 
      path: "{{ item.item.bind2 }}"
      state: directory
      owner: deadlineuser
      group: deadlineuser
    when: item.item.bind2 and item.rc == 0
    with_items: 
    - "{{ softnas_exports }}"

  - fail:
      msg: "{{ item.item.path }} is set to be present in exports dict but doesn't exist in /etc/exports"
    when: item.item.state == "present" and item.rc == 1
    with_items:
    - "{{ softnas_exports }}"

  - name: insert/update block in in /etc/fstab for found exports
    blockinfile:
      path: /etc/fstab
      block: |
        {{ groups['role_softnas'][0] }}:{{ item.item.path }} {{ item.item.path }} nfs4 rsize=8192,wsize=8192,timeo=14,intr,_netdev 0 0
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.item.path }} PRIMARY MOUNT"
      state: "{{ ( item.item.path and item.rc == 0 ) | ternary( item.item.state , 'absent' ) }}"
    with_items:
    - "{{ softnas_exports }}"

  - name: insert/update block in in /etc/fstab for found exports and bind1 points
    blockinfile:
      path: /etc/fstab
      block: |
        {{ item.item.path }} {{ item.item.bind1 }} none defaults,bind,timeo=14 0 0
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.item.path }} BIND1"
      state: "{{ ( item.item.path and item.item.bind1 and item.rc == 0 ) | ternary( item.item.state , 'absent' ) }}"
    with_items:
    - "{{ softnas_exports }}"

  - name: insert/update block in in /etc/fstab for found exports and bind2 points
    blockinfile:
      path: /etc/fstab
      block: |
        {{ item.item.path }} {{ item.item.bind2 }} none defaults,bind,timeo=14 0 0
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.item.path }} BIND2"
      state: "{{ ( item.item.path and item.item.bind2 and item.rc == 0 ) | ternary( item.item.state , 'absent' ) }}"
    with_items:
    - "{{ softnas_exports }}"

  - name: mount all changes to fstab
    command: mount -a
    become: true

### check exports of remote nas are available on cloud based host.
- hosts: "{{ variable_host | default('role_node_centos') }}"
  remote_user: "{{ variable_user | default('centos') }}"
  become: true

  vars:
    softnas_exports: "{{ hostvars[groups['role_softnas'][0]]['presence']['results'] }}"
    hostname: "node1.{{ public_domain }}"
    pcoip: False
    site_mounts:
    # remote mounts not on cloud site- example.  Update with your own details and set state to present.
    - path: "/prod/"
      ip: 192.168.29.30
      volume_name: prod
      state: absent
      bind1: "/remote_prod/"
      bind2: "/mycity_prod/"

  tasks:
  - name: Check for existance of custom exports in /vagrant/secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml and override default mounts
    stat:
      path: ../secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml
    register: custom_ebs_list
    connection: local

  - name: Override default exports
    include_vars:
      file: ../secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml
    when: custom_ebs_list.stat.exists
    connection: local

  - name: site_mounts
    debug:
      var: item
    with_items: "{{ site_mounts }}"

  - name: Check whether /etc/exports contains the mount
    shell: showmount -e {{ localnas1_private_ip }} | grep -E "^\/{{ item.volume_name }}.*"
    register: site_presence
    check_mode: no
    ignore_errors: yes
    changed_when: no
    with_items: "{{ site_mounts }}"

  - name: export existance test
    debug:
      var: item
    when: item.rc == 0
    with_items: "{{ site_presence.results }}"

  - name: export output always
    set_fact: exported_site_mounts="{{item}}"
    with_items: "{{ site_presence.results }}"

### update fstab with found mounts

  - name: exports to mount to this instance
    debug:
      var: item
    with_items: 
    - "{{ site_presence.results }}"

  - name: create mount directories
    file: 
      path: "{{ item.item.path }}"
      state: directory
      owner: deadlineuser
      group: deadlineuser
    when: item.rc == 0
    with_items: 
    - "{{ site_presence.results }}"

  - name: create bind1 directories
    file: 
      path: "{{ item.item.bind1 }}"
      state: directory
      owner: deadlineuser
      group: deadlineuser
    when: item.item.bind1 and item.rc == 0
    with_items: 
    - "{{ site_presence.results }}"

  - name: create bind2 directories
    file: 
      path: "{{ item.item.bind2 }}"
      state: directory
      owner: deadlineuser
      group: deadlineuser
    when: item.item.bind2 and item.rc == 0
    with_items: 
    - "{{ site_presence.results }}"

  - fail:
      msg: "{{ item.item.path }} is set to be present in exports dict but doesn't exist in /etc/exports"
    when: item.item.state == "present" and item.rc == 1
    with_items:
    - "{{ site_presence.results }}"

  - name: insert/update block in in /etc/fstab for found exports and path
    blockinfile:
      path: /etc/fstab
      block: |
        {{ item.item.ip }}:{{ item.item.path }} {{ item.item.mount_path }} nfs4 rsize=8192,wsize=8192,timeo=14,intr,_netdev 0 0
      marker: "# {mark} ANSIBLE MANAGED BLOCK SITE MOUNT {{ item.item.ip }} {{ item.item.path }} PRIMARY MOUNT"
      state: "{{ ( item.item.mount_path and item.rc == 0 ) | ternary( item.item.state , 'absent' ) }}"
    with_items:
    - "{{ site_presence.results }}"

  - name: insert/update block in in /etc/fstab for found exports and bind1 points
    blockinfile:
      path: /etc/fstab
      block: |
        {{ item.item.mount_path }} {{ item.item.bind1 }} none defaults,bind,timeo=14 0 0
      marker: "# {mark} ANSIBLE MANAGED BLOCK SITE MOUNT {{ item.item.ip }} {{ item.item.path }} BIND1"
      state: "{{ ( item.item.mount_path and item.item.bind1 and item.rc == 0 ) | ternary( item.item.state , 'absent' ) }}"
    with_items:
    - "{{ site_presence.results }}"

  - name: insert/update block in in /etc/fstab for found exports and bind2 points
    blockinfile:
      path: /etc/fstab
      block: |
        {{ item.item.mount_path }} {{ item.item.bind2 }} none defaults,bind,timeo=14 0 0
      marker: "# {mark} ANSIBLE MANAGED BLOCK SITE MOUNT {{ item.item.ip }} {{ item.item.path }} BIND2"
      state: "{{ ( item.item.mount_path and item.item.bind2 and item.rc == 0 ) | ternary( item.item.state , 'absent' ) }}"
    with_items:
    - "{{ site_presence.results }}"

  - name: mount all changes to fstab
    command: mount -a
    become: true