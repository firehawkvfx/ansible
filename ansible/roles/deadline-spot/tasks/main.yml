- name: install expect module
  package:
    name: expect
  become: true

- name: Run expect to wait for a keybase pass and decrypt - first time is dirty output.
  shell: |
    /vagrant/scripts/pgp-expect.sh {{ keybase_secret | regex_escape() }} {{ spot_secret | regex_escape() }}
  become_user: vagrant
  connection: local
  no_log: true

- name: Run expect to wait for a keybase pass and decrypt - collect output.
  shell: |
    /vagrant/scripts/pgp-expect.sh {{ keybase_secret | regex_escape() }} {{ spot_secret | regex_escape() }}
  become_user: vagrant
  connection: local
  register: spot_secret_output
  no_log: true

- set_fact:
    spot_secret_key: "{{ spot_secret_output.stdout }}"
  no_log: true

- fail:
    msg: "invalid output from keybase expect"
  when: '" " in spot_secret_key or spot_secret_key ==""'
  no_log: true

- debug:
    msg: "warning, multiple subnets in the json spot fleet template may cause errors"

- name: generate spot fleet config from template
  template:
    src: /secrets/dev/spot-fleet-templates/config_template.json
    dest: /secrets/dev/spot-fleet-templates/config_generated.json

# to list collections-
# show collections;

# To list the contents of EventPluginSettingsCollection (for example):
# db.EventPluginSettingsCollection.find().pretty()

# debug permissions with root {{ aws_access_key }}
# debug permissions with root {{ aws_secret_key }}
# normal use with {{ spot_access_key_id }}
# normal use with {{ spot_secret_key }}

# if using deadline > v10.0.28.2, use conf_list_blob in place of conf_json_blob
# - name: init spot template - list blob
#   shell: | 
#     set -x
#     cd /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/
#     ./deadline_mongo --sslPEMKeyPassword "{{ deadline_proxy_certificate_password }}" --eval 'db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"PluginEnabled": "1"}})'

#     ./deadline_mongo --sslPEMKeyPassword "{{ deadline_proxy_certificate_password }}" --eval '
#       var StaggerInstances = "5";
#       var IdleShutdown = "10";
#       var spot_json = cat("/secrets/dev/spot-fleet-templates/config_generated.json");
#       var conf_json_blob = { "State" : "Global Enabled", "AccessID" : "{{ aws_access_key }}", "SecretKey" : "{{ aws_secret_key }}", "Logging" : "Verbose", "Region" : "{{ aws_region }}", "Config" : spot_json, "IdleShutdown" : IdleShutdown, "DeleteTerminatedSlaves" : "True", "StrictHardCap" : "True", "StaggerInstances" : StaggerInstances };
#       var conf_list_blob = [ [ "State", "Global Enabled" ], [ "ResourceTracker", "True" ], [ "AccessID", "{{ aws_access_key }}" ], [ "SecretKey", "{{ aws_secret_key }}" ], [ "Logging", "Verbose" ], [ "Region", "{{ aws_region }}" ], [ "Config", spot_json ], [ "IdleShutdown", IdleShutdown ], [ "DeleteTerminatedSlaves", "True" ], [ "StrictHardCap", "True" ], [ "StaggerInstances", StaggerInstances ] ];
#       db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit": conf_list_blob}});
#     '
#     var done = "true"
#   become: true
#   register: deadline_db
#   with_items:
#   - insert
#   - update

- name: init spot template - json
  shell: | 
    set -x
    cd /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/
    ./deadline_mongo --sslPEMKeyPassword "{{ deadline_proxy_certificate_password }}" --eval '
      var StaggerInstances = "5";
      var IdleShutdown = "10";
      var spot_json = cat("/secrets/dev/spot-fleet-templates/config_generated.json");
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"PluginEnabled": "1"}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.State": "Global Enabled"}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.AccessID": "{{ spot_access_key_id }}"}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.SecretKey": "{{ spot_secret_key }}"}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.Logging": "Verbose"}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.Region": "{{ aws_region }}"}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.Config": spot_json}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.IdleShutdown": IdleShutdown}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.DeleteTerminatedSlaves": "True"}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.StrictHardCap": "True"}});
      db.EventPluginSettingsCollection.{{ item }}({"_id": "spot"},{$set:{"DlInit.StaggerInstances": StaggerInstances}});'
  become: true
  # register: deadline_db
  no_log: true
  with_items:
  - insert
  - update

# - debug:
#     var: deadline_db