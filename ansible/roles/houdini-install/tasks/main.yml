---
# tasks file for roles/houdini-install

- name: houdini_version_item
  debug:
    var: item
  with_items:
  - "{{ houdini_version_item }}"
  - "{{ houdini_install_type }}"

- name: "set permissions and ensure dir exists /home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
  file:
    path: "/home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
    state: directory
    mode: u=rwX,g=r
    owner: deadlineuser
    group: deadlineuser
  become: true

- name: "copy houdini-scripts to /home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
  copy:
    src: /vagrant/modules/node_centos/modules/houdini-scripts/
    dest: "/home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
    directory_mode: yes
    owner: deadlineuser
  become: true

- name: "set permissions on /home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
  file: 
    dest: "/home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
    owner: deadlineuser 
    group: deadlineuser
    mode: u=rwX,g=r
    recurse: yes
  become: true


- name: "set permissions on /home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/"
  file: 
    dest: "/home/deadlineuser/houdini{{ houdini_version_item.houdini_major_version }}/scripts/menus/"
    owner: deadlineuser 
    group: deadlineuser
    mode: u=rwX,g=r
    recurse: yes
  become: true

- set_fact:
    houdini_linux_filename: "{{ houdini_version_item.houdini_linux_filename }}"

- name: Query houdini filename - Houdini python script
  shell: |
    cd /opt/houdini_install_script/
    python /opt/houdini_install_script/houdini_install.py -u {{ sesi_username }} -p {{ sesi_password }} -i /opt/houdini -b {{ houdini_version_item.houdini_build }} -t {{ download_to_dir }} -q true -f {{ houdini_linux_filename }}
  register: houdini_query_out
  become: true
  when: houdini_version_item.houdini_auto_version

- name: Python output
  debug:
    var: item
  with_items:
  - "{{ houdini_query_out.stdout_lines }}"
  when: houdini_version_item.houdini_auto_version


- set_fact:
    houdini_linux_filename: "{{ item | regex_search(regexp) }}"
  vars:
    regexp: '(houdini.*.tar.*)'
  with_items:
  - "{{ houdini_query_out.stdout_lines }}"
  when: houdini_version_item.houdini_auto_version

- name: Houdini filename to install from sidefx website result
  debug:
    var: houdini_linux_filename

- name: (UBUNTU) Sync houdini from s3 if exist - pull
  shell: |
    set -x
    cd {{ download_to_dir }}/
    aws s3 sync s3://{{ bucket }}/ . --exclude "*" --include "{{ houdini_linux_filename }}"
  args:
    creates: "{{ download_to_dir }}/{{ houdini_linux_filename }}"
  become_user: "{{ variable_user }}"
  when: houdini_install_type == "server"

- name: (CENTOS) Sync houdini from s3 if exist - pull
  shell: |
    set -x
    cd {{ download_to_dir }}/
    ~/.local/bin/aws s3 sync s3://{{ bucket }}/ . --exclude "*" --include "{{ houdini_linux_filename }}"
  args:
    creates: "{{ download_to_dir }}/{{ houdini_linux_filename }}"
  become_user: "{{ variable_user }}"
  when: houdini_install_type != "server"

- name: Auto download and install Houdini with python script - auto version
  shell: |
    cd /opt/houdini_install_script/
    sudo python /opt/houdini_install_script/houdini_install.py -u {{ sesi_username }} -p {{ sesi_password }} -i /opt/houdini -b {{ houdini_version_item.houdini_build }} -t {{ download_to_dir }} -q false
  register: houdini_install_out
  become: true
  when: houdini_install_type != "server" and houdini_version_item.houdini_auto_version
  failed_when:
  - "'Nothing was installed.' in houdini_install_out.stderr"

- debug:
    msg:  "{{ houdini_install_out.stdout }}"
  when: houdini_install_type != "server" and houdini_version_item.houdini_auto_version

- name: Install Houdini with python script - specific existing version from s3 bucket
  shell: |
    cd /opt/houdini_install_script/
    sudo python /opt/houdini_install_script/houdini_install.py -u {{ sesi_username }} -p {{ sesi_password }} -i /opt/houdini -b {{ houdini_version_item.houdini_build }} -t {{ download_to_dir }} -q false -f {{ houdini_linux_filename }}
  register: houdini_install_out
  become: true
  when: houdini_install_type != "server" and not houdini_version_item.houdini_auto_version
  failed_when:
  - "'Nothing was installed.' in houdini_install_out.stderr"

- debug:
    msg:  "{{ houdini_install_out.stdout }}"
  when: houdini_install_type != "server" and not houdini_version_item.houdini_auto_version

- name: "setup licensing mode will write to /opt/hfs{{ houdini_version_item.houdini_major_version }}/houdini/Licensing.opt"
  shell: |
    cd /opt/hfs{{ houdini_version_item.houdini_major_version }}
    sudo sed -i '/licensingMode = sesinetd/s/^# //g' /opt/hfs{{ houdini_version_item.houdini_major_version }}/houdini/Licensing.opt
    sudo cat /opt/hfs{{ houdini_version_item.houdini_major_version }}/houdini/Licensing.opt
  register: houdini_hserver_out
  become: true
  when: houdini_install_type != "server"

- name: setup licensing server ip as deadline user will write to $HOME/.sesi_licenses.pref
  shell: |
    cd /opt/hfs{{ houdini_version_item.houdini_major_version }}
    source ./houdini_setup
    hserver
    hserver -S {{ houdini_license_server_address }}
    hserver -l
    echo $HOME
  register: houdini_hserver_deadlineuser_out
  become_user: deadlineuser
  when: houdini_install_type != "server"

### SERVER INSTALL
- name: SERVER INSTALL - check if hserver file exists
  stat: 
    path: /opt/hfs17.5/bin/hserver
  register: hserver_check
  become: true
  when: houdini_install_type == "server"

- name: SERVER INSTALL - Stop licensing server if already running / installed.  Please ignore any error if hserver not running.
  shell: |
    /opt/hfs17.5/bin/hserver -q
  ignore_errors: yes
  become: true
  when: houdini_install_type == "server" and hserver_check.stat.exists

- name: SERVER INSTALL - permissions
  file:
    path: "{{ download_to_dir }}/{{ houdini_linux_filename }}"
    mode: u+rw,g+rw,o+rw
  become: true
  when: houdini_install_type == "server"

# - name: create dir
#   file:
#     path: "{{ download_to_dir }}/{{ houdini_linux_filename | regex_replace('.tar.gz$', '') }}"
#     state: directory
#     mode: u=rwX,g=rwx
#     owner: "{{ variable_user }}"
#   become_user: "{{ variable_user }}"
#   become: true
#   when: houdini_install_type == "server"

- name: SERVER INSTALL - make dir.
  shell: |
    set -x
    cd {{ download_to_dir }}
    dir={{ houdini_linux_filename | regex_replace('.tar.gz$', '') }}
    echo "$dir"
    sudo mkdir -p "$dir"
    cd "$dir"
  register: houdini_install_out
  become_user: "{{ variable_user }}"
  become: true
  when: houdini_install_type == "server"

- name: SERVER INSTALL - unarchive houdini with correct dir.
  shell: |
    set -x
    dir={{ houdini_linux_filename | regex_replace('.tar.gz$', '') }}
    cd {{ download_to_dir }}
    sudo tar -xvf {{ houdini_linux_filename }} -C "{{ houdini_linux_filename | regex_replace('.tar.gz$', '') }}" --strip-components 1
  register: houdini_install_out
  become_user: "{{ variable_user }}"
  become: true
  when: houdini_install_type == "server"

# - name: Unarchive a file with extra options
#   unarchive:
#     src: "{{ download_to_dir }}/{{ houdini_linux_filename }}"
#     dest: "{{ download_to_dir }}/{{ houdini_linux_filename | regex_replace('.tar.gz$', '') }}"
#     # extra_opts:
#     # - --strip-components 1
#   become_user: "{{ variable_user }}"
#   become: true
#   when: houdini_install_type == "server"

# sudo ./houdini.install --auto-install --accept-EULA --install-houdini --no-license --install-hfs-symlink --make-dir /opt/houdini/18.0.221

- name: SERVER INSTALL - install houdini with correct dir.
  shell: |
    set -x
    cd {{ download_to_dir }}/{{ houdini_linux_filename | regex_replace('.tar.gz$', '') }}
    sudo ./houdini.install --accept-EULA --install-houdini --install-license --install-hfs-symlink --auto-install
  register: houdini_install_out
  become_user: "{{ variable_user }}"
  become: true
  when: houdini_install_type == "server"

- debug:
    msg:  "{{ houdini_install_out.stdout }}"
  when: houdini_install_type == "server"

- name: SERVER INSTALL - setup licensing mode
  shell: |
    cd /opt/hfs17.5
    sudo sed -i '/licensingMode = sesinetd/s/^# //g' /opt/hfs17.5/houdini/Licensing.opt
    sudo cat /opt/hfs17.5/houdini/Licensing.opt
    /opt/hfs17.5/bin/hserver
  become: true
  when: houdini_install_type == "server"
### END SERVER INSTALL

# After install sync houdini download with bucket

- name: "ensure the houdini installer exists in the s3 bucket installers.{{ public_domain }} Push if it doesn't."
  s3_sync:
    bucket: "installers.{{ public_domain }}"
    file_root: "{{ download_to_dir }}"
    include: "{{ houdini_linux_filename }}"
    aws_access_key: "{{ aws_access_key_s3user }}"
    aws_secret_key: "{{ aws_secret_key_s3user }}"
    region: "{{ aws_region }}"
    mode: push
  tags:
    - sync_installers