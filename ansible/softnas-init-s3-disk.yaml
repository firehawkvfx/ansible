- hosts: role_softnas
  remote_user: centos
  become_user: root
  become: true

  vars:
    new_pool_name: pool1
    new_volume_name: volume1
    s3_disk_bucket_name: "{{ public_domain | replace('.','') }}-softnas-{{ new_pool_name }}-{{ new_volume_name }}"
    s3_disk_size_max_value: 50
    s3_disk_size_max_units: GB
    s3_disk_region: "{{ aws_region }}"
  
  # import by bucket name if bucket name exists, then import, else create.
  # if created, then also do this.
  # create pool from disk mount
  # create volume from pool
  # ----
  # create nfs share.

  # create ability to delete

  tasks:

  - name: bucket name
    debug:
      msg: "{{s3_disk_bucket_name}}"

  - name: softnas login
    shell: |
      softnas-cmd login softnas {{ user_softnas_pw }}

  - name: create s3 extender disk
    shell: |
      softnas-cmd login softnas {{ user_softnas_pw }}
      softnas-cmd diskmgmt createExtenderDisk type=amazon accessKey={{ aws_access_key }} secretKey={{ aws_secret_key }} bucketName={{ s3_disk_bucket_name }} sizeMaxValue={{ s3_disk_size_max_value }} sizeMaxUnits={{ s3_disk_size_max_units }} region={{ s3_disk_region }} encrypted={{ s3_disk_password }} > /tmp/softnas_init_s3_disk_output_dict.json
  
  - fetch:
      src: /tmp/softnas_init_s3_disk_output_dict.json
      dest: /tmp/
      flat: true

  - include_vars:
      file: /tmp/softnas_init_s3_disk_output_dict.json
      name: softnas_init_s3_disk_output_dict

  - name: s3 extender disk all json output
    debug:
      msg: "{{ softnas_init_s3_disk_output_dict }}"

  - name: check if softnas cli login succeeded
    debug:
      msg: "softnas-cli login succeeded"
    when: softnas_init_s3_disk_output_dict.success

  - name: check if softnas cli login failed
    fail:
      msg: "{{softnas_init_s3_disk_output_dict}}"
    failed_when: softnas_init_s3_disk_output_dict.success == false

  # - name: check if disk create succeeded
  #   debug:
  #     msg: "{{softnas_init_s3_disk_output_dict.result.msg}}"
  #   when: softnas_init_s3_disk_output_dict.result.success

  - name: check if disk create failed
    fail:
      msg: "{{softnas_init_s3_disk_output_dict.result.msg}}"
    failed_when: softnas_init_s3_disk_output_dict.result.success == false

  - set_fact:
      new_s3_disk_name: "{{ softnas_init_s3_disk_output_dict.result.records.disk_info.disk_name }}"
    
  - name: new disk name
    debug:
      msg: "{{ new_s3_disk_name }}"

  - name: create pool
    shell: |
      softnas-cmd login softnas {{ user_softnas_pw }}
      softnas-cmd createpool {{ new_s3_disk_name }} -n={{ new_pool_name }} -r=0 -f=on -sync=standard -cs=off -shared=on -t > /tmp/softnas_init_pool_output_dict.json

  - fetch:
      src: /tmp/softnas_init_pool_output_dict.json
      dest: /tmp/
      flat: true

  - include_vars:
      file: /tmp/softnas_init_pool_output_dict.json
      name: softnas_init_pool_output_dict

  - name: create pool all json output
    debug:
      msg: "{{ softnas_init_pool_output_dict }}"

  - name: check if softnas cli login succeeded
    debug:
      msg: "softnas-cli login succeeded"
    when: softnas_init_pool_output_dict.success

  - name: check if softnas cli login failed
    fail:
      msg: "{{softnas_init_pool_output_dict}}"
    failed_when: softnas_init_pool_output_dict.success == false

  # - name: check if pool create succeeded
  #   debug:
  #     msg: "{{softnas_init_pool_output_dict.result.msg}}"
  #   when: softnas_init_pool_output_dict.result.success

  - name: check if pool create failed
    fail:
      msg: "{{softnas_init_pool_output_dict.result.msg}}"
    failed_when: softnas_init_pool_output_dict.result.success == false

  - name: create volume
    shell: |
      softnas-cmd login softnas {{ user_softnas_pw }}
      softnas-cmd createvolume vol_name={{ new_volume_name }} pool={{ new_pool_name }} vol_type=filesystem provisioning=thin exportNFS=on shareCIFS=on enable_snapshot=off sync=always replication=off > /tmp/softnas_init_volume_output_dict.json

  - fetch:
      src: /tmp/softnas_init_volume_output_dict.json
      dest: /tmp/
      flat: true

  - include_vars:
      file: /tmp/softnas_init_volume_output_dict.json
      name: softnas_init_volume_output_dict

  - name: create volume all json output
    debug:
      msg: "{{ softnas_init_volume_output_dict }}"

  - name: check if softnas cli login succeeded
    debug:
      msg: "softnas-cli login succeeded"
    when: softnas_init_volume_output_dict.success

  - name: check if softnas cli login failed
    fail:
      msg: "{{softnas_init_volume_output_dict}}"
    failed_when: softnas_init_volume_output_dict.success == false

  # - name: check if volume create succeeded
  #   debug:
  #     msg: "{{softnas_init_volume_output_dict.result.msg}}"
  #   when: softnas_init_volume_output_dict.result.success

  - name: check if volume create failed
    fail:
      msg: "{{softnas_init_volume_output_dict.result.msg}}"
    failed_when: softnas_init_volume_output_dict.result.success == false


    #