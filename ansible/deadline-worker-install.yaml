# To configure ssh for a local workstation, read https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/

#then run these two commmands.  for some reason ping is required first or hang on gathering facts occurs.
# ansible-playbook -i "$TF_VAR_inventory" ansible/deadline-worker-install.yaml --tags "onsite-install"

# # these permissions are now handled post install of the deadline db.
- hosts: firehawkgateway
  remote_user: deployuser
  become: true

  tasks:
  - name: set permissions Thinkbox dir - non recursive
    file: 
      path: /opt/Thinkbox/
      state: directory
      mode: u+rX,g+rX,o-rwx
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: set permissions Thinkbox cert dir - non recursive
    file: 
      path: /opt/Thinkbox/certs
      state: directory
      mode: u=rwX,g=rX,o-rwx
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: set permissions DeadlineRepository10 - recursive
    file:
      path: /opt/Thinkbox/DeadlineRepository10/
      owner: deadlineuser
      group: syscontrol
      mode: u=rX,g=rX,o-rwx
      recurse: yes
    become: true
    tags:
    - cloud-install
    - onsite-install

  - name: set permissions DeadlineRepository10/jobs jobsArchived reports
    file:
      path: "{{ item }}"
      owner: deadlineuser
      group: syscontrol
      mode: u=rwX,g=rwX,o-rwx
      recurse: yes
    become: true
    tags:
    - cloud-install
    - onsite-install
    with_items:
    - /opt/Thinkbox/DeadlineRepository10/jobs
    - /opt/Thinkbox/DeadlineRepository10/jobsArchived
    - /opt/Thinkbox/DeadlineRepository10/reports

- hosts: "{{ variable_host | default('workstation1') }}"
  remote_user: "{{ variable_user | default('user') }}"
  become: true

  vars:
    ansible_become_pass: "{{ user_deadlineuser_pw }}"
    ansible_password: "{{ user_deadlineuser_pw }}"

  tasks:
  - name: establish connect test
    stat:
      path: "/home/deadlineuser"
    register: result
    tags:
    - cloud-install
    - onsite-install

- hosts: "{{ variable_host | default('workstation1') }}"
  remote_user: "{{ variable_user | default('root') }}"
  become: true

  vars:
    pcoip: False
    ansible_become_pass: "{{ user_deadlineuser_pw }}"

  roles:
    - role: pip

  post_tasks:
  # the syscontrol group is normally created when a host and user is first configured, but for a local install we ensure that it is created here in any case, since its possible that new users may not have this group.
  - name: Ensure group "syscontrol" exists
    group:
      name: syscontrol
      state: present
      gid: "{{ syscontrol_gid }}"
    become: true
    tags:
    - cloud-install
    - onsite-install

  - name: adding existing user "{{ item }}" to group syscontrol
    user:
      name: "{{ item }}"
      groups: syscontrol
      append: yes
    with_items:
    - deadlineuser
    become: true
    tags:
    - cloud-install
    - onsite-install

  - name: create Thinkbox dir
    file: 
      path: /opt/Thinkbox/
      state: directory
      mode: u=rwX,g=rX,o-rwx
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: create Thinkbox cert dir
    file: 
      path: /opt/Thinkbox/certs
      state: directory
      mode: u=rwX,g=rX,o-rwx
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: Create submission scripts dir if it doesn't exist on remote
    file: 
      path: /opt/Thinkbox/DeadlineRepository10/submission
      state: directory
      mode: u=rX,g=rX,o-rwx
      owner: deadlineuser
      group: syscontrol
      recurse: yes
    become: yes
    tags:
    - cloud-install
    - onsite-install

- hosts: firehawkgateway
  remote_user: deployuser
  become: true

  tasks:
  - name: ensure local submission scripts dir permissions are readable on the ansible control
    file:
      path: /opt/Thinkbox/DeadlineRepository10/submission
      state: directory
      mode: u=rX,g=rX,o=r
      owner: deadlineuser
      group: syscontrol
      recurse: yes
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: set deadline remote client certificate permissions locally
    file: 
      path: "{{ deadline_certificates_location }}/Deadline10RemoteClient.pfx"
      mode: 0644
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

- hosts: firehawkgateway
  remote_user: deployuser
  become: true

  tasks:
  - name: Fetch deadline remote client certificate and store on ansible_control
    fetch: 
      src: "{{ deadline_certificates_location }}/Deadline10RemoteClient.pfx"
      dest: "/secrets/keys/"
      mode: 0600
      owner: deadlineuser
      group: syscontrol
      flat: true
    become: yes
    # delegate_to: firehawkgateway
    tags:
    - cloud-install
    - onsite-install

- hosts: "{{ variable_host | default('workstation1') }}"
  remote_user: "{{ variable_connect_as_user | default('deployuser') }}"
  become: true
  
  tasks:
# these packages are required to pass an encrypted string via commandline into a user pass and are suited to centos.
  - name: install expect
    package:
      name: expect
      state: present
    tags:
    - cloud-install
    - onsite-install

  - name: restart sshd.service
    service: 
      name: sshd
      state: restarted
    tags:
    - cloud-install
    - onsite-install

  - name: Copy deadline remote client certificate
    copy: 
      src: "/secrets/keys/Deadline10RemoteClient.pfx"
      dest: "/opt/Thinkbox/certs/"
      mode: 0600
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: create download dir
    file: 
      path: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
      state: directory
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: ensure an s3 bucket exists
    s3_bucket:
      name: "{{ installers_bucket }}"
      region: "{{ aws_region }}"
    tags:
    - cloud-install
    - onsite-install

  - name: S3 GET deadline
    aws_s3:
      bucket: "{{ installers_bucket }}"
      object: "{{ deadline_linux_filename }}"
      dest: "/home/deadlineuser/Downloads/{{ deadline_linux_filename }}"
      mode: get
      region: "{{ aws_region }}"
    tags:
    - cloud-install
    - onsite-install

  - name: create deadline installer dir
    file: 
      path: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
      state: directory
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: Extract
    unarchive:
      src: "/home/deadlineuser/Downloads/{{ deadline_linux_filename }}"
      dest: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
      owner: deadlineuser
      mode: u+x
      remote_src: true
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: "Ansible find files in subdirectory downloads"
    find:
      paths: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
      patterns: "*DeadlineClient-{{ deadline_version }}-linux-x64-installer.run"
    register: files_matched
    become: true
    tags:
    - cloud-install
    - onsite-install

  - debug:
      msg: "installer path: {{ files_matched.files[0].path }}"
    tags:
    - cloud-install
    - onsite-install

  - name: set execute permissions on installer
    file:
      path: "{{ files_matched.files[0].path }}"
      mode: 0700
      owner: deadlineuser
      group: syscontrol
    become: yes
    tags:
    - cloud-install
    - onsite-install

  - name: deadline dependencies
    package:
      name:
      - redhat-lsb
      - samba-client
      - samba-common
      - cifs-utils
      - nfs-utils
      - tree
      - bzip2
      - nmap
      state: present

    tags:
    - cloud-install
    - onsite-install

  - stat:
      path: /var/lib/Thinkbox/Deadline10/deadline.ini
    register: deadline_ini_file
    tags:
    - cloud-install
    - onsite-install

  - name: get date
    shell: |
      date +"%Y%m%d_%H%M%S"
    register: current_date
    tags:
    - cloud-install
    - onsite-install

  - set_fact:
      backup_dest: "/var/lib/Thinkbox/Deadline10/deadline.bak_{{ current_date.stdout }}"
    when: deadline_ini_file.stat.exists
    tags:
    - cloud-install
    - onsite-install

  - debug:
      msg: "will backup file to {{ backup_dest }}"
    when: deadline_ini_file.stat.exists
    tags:
    - cloud-install
    - onsite-install

  - name: move old config to backup.  this prevents old conf settings staying around.
    command: "mv /var/lib/Thinkbox/Deadline10/deadline.ini {{ backup_dest }}"
    when: deadline_ini_file.stat.exists
    tags:
    - cloud-install
    - onsite-install

  - name: install deadline client
    shell: |
      cd /home/deadlineuser/Downloads/
      set -x
      {{ files_matched.files[0].path }} --mode unattended --debuglevel 2 --prefix {{ deadline_prefix }} --connectiontype Remote --noguimode true --licensemode UsageBased --launcherdaemon true --slavestartup 1 --daemonuser {{ user_deadlineuser_name }} --enabletls true --tlsport 4433 --httpport 8080 --proxyrootdir {{ deadline_proxy_root_dir }} --proxycertificate {{ deadline_proxy_certificate }} --proxycertificatepassword {{ deadline_proxy_certificate_password }}
    register: deadline_client_install_output_shell
    become: true
    tags:
    - cloud-install
    - onsite-install

  - name: check deadline client install output
    debug:
      msg: "{{ deadline_client_install_output_shell.stdout }}"
    tags:
    - cloud-install
    - onsite-install

  - name: check /var/lib/Thinkbox/Deadline10/deadline.ini
    command: cat /var/lib/Thinkbox/Deadline10/deadline.ini 
    register: deadline_config
    tags:
    - cloud-install
    - onsite-install

  - debug: msg="{{ deadline_config.stdout }}"
    tags:
    - cloud-install
    - onsite-install

  - debug: msg="{{ deadline_config.stderr }}"
    tags:
    - cloud-install
    - onsite-install

  - name: Add alias for deadlinemonitor
    lineinfile:
      state: present
      path: /home/deadlineuser/.bashrc
      line: "alias deadlinemonitor='cwd=\"$(pwd)\" && cd /opt/Thinkbox/Deadline10/bin && ./deadlinemonitor'"
      backup: true
      owner: deadlineuser
      regexp: ".*alias deadlinemonitor=.*"
    become: yes
    tags:
    - cloud-install
    - onsite-install

# multislave functionality
  - copy:
      src: /deployuser/scripts/deadline-multi-slave.sh
      dest: /usr/bin/deadline-multi-slave.sh
      owner: deadlineuser
      group: syscontrol
      mode: u=rx,g=rx,o-rwx
    become: yes
    tags:
    - cloud-install
    - onsite-install
    - multi-slave

# wrapper for multislave script to run as service
  - copy:
      src: /deployuser/scripts/multislaveservice.sh
      dest: /usr/bin/multislaveservice.sh
      owner: root
      group: root
      mode: u=rx,g=rx,o=rx
    become: yes
    tags:
    - cloud-install
    - onsite-install
    - multi-slave

# service wraper for multislave
  - copy:
      src: /deployuser/scripts/multislaveservice.service
      dest: /etc/systemd/system/multislaveservice.service
      owner: root
      group: root
      mode: 0644
    become: yes
    tags:
    - cloud-install
    - onsite-install
    - multi-slave
    
  - name: Start service multislaveservice, if not started
    service:
      name: multislaveservice
      state: started
      daemon_reload: true
      enabled: true
    become: yes
    tags:
    - cloud-install
    - onsite-install
    - multi-slave

  - debug:
      msg: "to disable multilsave service for deadline use 'systemctl disable multislaveservice.service'"
    tags:
    - cloud-install
    - onsite-install
    - multi-slave

  - name: allow permission for deadline to shutdown the machine.
    lineinfile:
      state: present
      path: /etc/sudoers
      line: "deadlineuser ALL=(ALL) NOPASSWD: /sbin/poweroff, /sbin/reboot, /sbin/shutdown"
      insertafter: '^.*localhost=/sbin/shutdown.*$'
    become: true
    tags:
    - cloud-install
    - onsite-install