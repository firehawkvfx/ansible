# This script will query the latest daily or production build with side fx and install it.
# if the file exists in s3, it will be downloaded and installed.  aws cli must be configured with a key that has permission to access s3.
# Do not install the cli on cloud nodes with aws account root permissions!  A seperate user / key with the minimum s3 permissions required is recommended.

# If the file doesn't exist in the s3 bucket, it will be downloaded from side fx, and then pushed to the bucket after install.

# Example install on an aws instance
# ansible-playbook -i ansible/inventory ansible/node-centos-houdini.yaml -v --extra-vars "variable_host=role_workstation_centos hostname=workstation1.${var.public_domain_name}"
# Example local install on a RHEL 7.6 / CENTOS workstation / render node.
# ansible-playbook -i ansible/inventory ansible/node-centos-houdini.yaml -v --extra-vars "variable_host=workstation.firehawkvfx.com variable_user=deadlineuser hostname=workstation.firehawkvfx.com ansible_become_pass=sompass"

- hosts: "{{ variable_host | default('role_node_centos') }}"
  remote_user: "{{ variable_user | default('centos') }}"
  become: true

  tasks:
  - name: test connection
    debug:
      msg: "connection established"

# sync installers from/to s3 bucket.  any new houdini versions will be pushed from ansible control to the bucket.

- hosts: ansible_control
  remote_user: vagrant
  become: true
  
  vars:
    sync_downloads: false
    bucket: "installers.{{ public_domain }}"

  tasks:
  - name: ensure an s3 bucket exists to store large files / installers for faster redeployment.
    s3_bucket:
      name: "{{ bucket }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ aws_region }}"
    tags:
      - sync_installers

  - name: ensure the downloads folder is syncronised with the bucket
    s3_sync:
      bucket: "{{ bucket }}"
      file_root: /vagrant/downloads/
      include: "*"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ aws_region }}"
    when: sync_downloads
    tags:
      - sync_installers

- hosts: "{{ variable_host | default('role_node_centos') }}"
  remote_user: "{{ variable_user | default('centos') }}"
  become: true

  vars:
    sesi_username: myemaillogin@sidefxwebsite
    sesi_password: mypassword@sidefxwebiste
    houdini_build: daily
    download_to_dir: /var/tmp/openfirehawk
    
    variable_user: centos
    bastionip: "{{ groups['bastionip'][0] }}"
    hostname: "node1.{{ public_domain }}"
    skip_packages: false
    skip_install: false
    bucket: "installers.{{ public_domain }}"


  tasks:
  - package:
      name: "{{ item }}"
      state: present
    when: not skip_packages
    with_items:
      - mesa-libGLw
      - libXp
      - libXp-devel
      - mesa-libGLU
    tags:
      - packages
    

  - name: install pip
    package:
      name: python-pip
      state: latest
    when: not skip_packages

  - name: install nmap to open port range for tops
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - nmap

  - name: Open port ranges for Houdini TOP's PDG
    command: "nmap -p  {{ item.port }} {{ item.dest }}"
    register: nmap_result
    with_items:
      - { port: '49152-65535', dest: remote_subnet_cidr }
      - { port: '49152-65535', dest: vpn_cidr }
      - { port: '49152-65535', dest: private_subnet1 }
      - { port: '49152-65535', dest: private_subnet2 } 
      - { port: '49152-65535', dest: public_subnet1 }
      - { port: '49152-65535', dest: public_subnet2 }

  - debug:
      msg: "{{ item.stdout }}"
    with_items:
      - "{{ nmap_result.results }}"
    when: debug > 0

  - name: dir permissions on /opt/houdini_install_script
    file:
      path: /opt/houdini_install_script
      state: directory
      mode: 0700
      owner: "{{ variable_user }}"

  - name: dir permissions on "{{ download_to_dir }}"
    file:
      path: "{{ download_to_dir }}"
      state: directory
      mode: 0700
      owner: "{{ variable_user }}"

  - name: Install beautifulsoup4 for web page crawling
    pip:
      name: beautifulsoup4
    when: not skip_packages

  - name: Copy Houdini auto install script to remote host from ansible control.
    copy:
      src: /vagrant/modules/node_centos/modules/houdini_install_script/
      dest: /opt/houdini_install_script/
      directory_mode: yes

  - name: set permissions on houdini_install.py
    file:
      path: /opt/houdini_install_script/houdini_install.py
      mode: 0700

  - name: set permissions on /home/deadlineuser/houdini17.5/scripts/
    file:
      path: /home/deadlineuser/houdini17.5/scripts/
      state: directory
      mode: 0700
      owner: deadlineuser

  - name: copy houdini-scripts to /home/deadlineuser/houdini17.5/scripts/
    copy:
      src: /vagrant/modules/node_centos/modules/houdini-scripts/
      dest: /home/deadlineuser/houdini17.5/scripts/
      directory_mode: yes
      owner: deadlineuser
    become: true

  - name: set permissions on /home/deadlineuser/houdini17.5/scripts/
    file: 
      dest: /home/deadlineuser/houdini17.5/scripts/ 
      owner: deadlineuser 
      mode: u=rwX,g=r 
      recurse: yes

  - name: Query houdini filename - Houdini python script
    shell: |
      cd /opt/houdini_install_script/
      python /opt/houdini_install_script/houdini_install.py -u {{ sesi_username }} -p {{ sesi_password }} -i /opt/houdini -b {{ houdini_build }} -t {{ download_to_dir }} -q true
    register: houdini_query_out
    become: true
    when: not skip_install

  - name: Python output
    debug:
      var: item
    with_items:
    - "{{ houdini_query_out.stdout_lines }}"


  - set_fact:
      houdini_linux_filename: "{{ item | regex_search(regexp) }}"
    vars:
      regexp: '(houdini.*.tar.*)'
    with_items:
    - "{{ houdini_query_out.stdout_lines }}"

  - name: Houdini filename to install from sidefx website result
    debug:
      var: houdini_linux_filename

  - name: Sync houdini from s3 if exist - pull
    shell: |
      set -x
      cd {{ download_to_dir }}/
      ~/.local/bin/aws s3 sync s3://{{ bucket }}/ . --exclude "*" --include "{{ houdini_linux_filename }}"
    become_user: "{{ variable_user }}"

  - name: Auto download and install Houdini python script
    shell: |
      cd /opt/houdini_install_script/
      sudo python /opt/houdini_install_script/houdini_install.py -u {{ sesi_username }} -p {{ sesi_password }} -i /opt/houdini -b {{ houdini_build }} -t {{ download_to_dir }} -q false
    register: houdini_install_out
    become: true
    when: not skip_install

  - debug:
      msg:  "{{ houdini_install_out.stdout }}"
    when: not skip_install

  - name: setup licensing mode will write to /opt/hfs17.5/houdini/Licensing.opt
    shell: |
      cd /opt/hfs17.5
      sudo sed -i '/licensingMode = sesinetd/s/^# //g' /opt/hfs17.5/houdini/Licensing.opt
      sudo cat /opt/hfs17.5/houdini/Licensing.opt
    register: houdini_hserver_out
    become: true
    when: not skip_install
  
  - name: setup licensing server ip as deadline user will write to $HOME/.sesi_licenses.pref
    shell: |
      cd /opt/hfs17.5
      source ./houdini_setup
      hserver
      hserver -S {{ houdini_license_server_address }}
      hserver -l
      echo $HOME
    register: houdini_hserver_deadlineuser_out
    become_user: deadlineuser
    when: not skip_install

# After install sync houdini download with bucket

  - name: ensure the houdini installer exist in the s3 bucket.  Push if it push if it doesn't.
    s3_sync:
      bucket: "installers.{{ public_domain }}"
      file_root: "{{ download_to_dir }}"
      include: "{{ houdini_linux_filename }}"
      aws_access_key: "{{ aws_access_key_s3user }}"
      aws_secret_key: "{{ aws_secret_key_s3user }}"
      region: "{{ aws_region }}"
      mode: push
    tags:
      - sync_installers

  - name: enforce houdini environment variables for all users in all bash shells always.  this is a temporary fix to enforce available env vars for tops to workaround a bug.
    copy:
      dest: /etc/profile.d/houdini_init.sh
      content: |
        cwd="$(pwd)" && cd /opt/hfs17.5/ && source ./houdini_setup && cd $cwd
      mode: u=rw,g=r,o=r
      owner: root
      group: root 
    become: true
    tags:
      - enforce_houdini_env_vars