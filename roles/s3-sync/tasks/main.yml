- name: Test output
  debug:
    msg: "variable_user:{{ variable_user }}"

- name: Sync S3
  shell: |
    set -x

    cd {{ basedir }}
    exit_code=$?
    pwd
    ls -ltriah
    if [[ ! "$exit_code" -eq 0 ]]; then echo "Failed: Couldn't cd to base directory."; exit 1; fi
    
    test_file () {
      local filename="$1"
      wordcount=`aws s3 ls s3://{{ bucket }}/|grep {{ filename }}|wc -c`
      if [[ "${wordcount}" -eq 0 ]]; then
        file_in_bucket=true
      else
        file_in_bucket=false
      fi
    }
    test_file "$filename"
    # echo wordcount=${wordcount}
    
    if [[ "$file_in_bucket" == true ]]; then
      if [[ {{ mode }} == 'push' ]]; then
        echo "Sync Push: File not yet present in S3 bucket, will push."
        if [ -f "{{ filename }}" ]; then
          aws s3 sync . s3://{{ bucket }}/ --exclude "*" --include "{{ filename }}" --no-progress
          test_file "$filename"
          if [[ "$file_in_bucket" == false ]]; then
            echo "Failed: File not present in bucket after attempt to push."
            exit 1
          fi
          echo "Success: File is present in bucket after push."
          exit 0
        else 
          echo "Failed: {{ filename }} does not exist on disk, won't push."
          exit 1
        fi
        
      else
        echo "Won't pull, File not present in S3 bucket."
        exit 0
      fi
    else
      if [[ {{ mode }} == 'push' ]]; then
        echo "Sync Push: File already present in S3 bucket, won't push."
        exit 0
      else
        echo "Sync Pull: File present in S3 bucket..."
        if [ -f "{{ filename }}" ]; then
          echo "{{ filename }} already exists.  Won't Pull"
          exit 0
        else 
          aws s3 sync s3://{{ bucket }}/ . --exclude "*" --include "{{ filename }}" --no-progress
          if [ -f "{{ filename }}" ]; then
            echo "Success: File is present on disk after pull."
            exit 0
          else
            echo "Failed: Pull not present on disk after attempt to pull."
            exit 1
          fi
        fi
      fi
    fi
  register: output
  become_user: "{{ variable_user }}"
  args:
    executable: /bin/bash
  # failed_when: output.rc != 0

# - name: show output
#   debug:
#     var: output


# - name: Download Houdini from SESI website - auto versions
#   get_url:
#     url: "{{ download_url }}"
#     dest: "{{ basedir }}/{{ filename }}"
#     mode: u=rw,g=rw,o=rw
#     checksum: "md5:{{hash}}"
#   become: true
#   when: houdini_version_item.houdini_auto_version and not output.stdout is search("Sync S3 Bucket with local path.") # If the S3 sync does not occur, download from Side FX.
