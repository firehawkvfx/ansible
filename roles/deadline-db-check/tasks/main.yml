
- name: check /opt/Thinkbox/certs/
  shell: |
    ls -ltriah /opt/Thinkbox/certs/
  become: true
  register: certsdir

- name: show /opt/Thinkbox/certs/
  debug:
    var: certsdir.stdout
  become: true

- name: check for /opt/Thinkbox/certs/Deadline10RemoteClient.pfx
  stat: path=/opt/Thinkbox/certs/Deadline10RemoteClient.pfx
  register: Deadline10RemoteClient
  become: true

- name: Fail if missing
  fail: msg="/opt/Thinkbox/certs/Deadline10RemoteClient.pfx is missing"
  when: Deadline10RemoteClient.stat.exists == False
  become: true

- name: Ensure db is still valid.  if this fails, db is corrupted or there is a permissions issue
  block:
    # - name: fatal error will be unset if success
    #   set_fact:
    #     fatal_error: true
    - name: check db
      shell: |
        cd /opt/Thinkbox/DeadlineDatabase10/mongo/application/bin/
        ./deadline_mongo --sslPEMKeyPassword "{{ deadline_proxy_certificate_password }}" --eval "printjson(db.getCollectionNames())"
      no_log: false
      become: true
      retries: 5
      delay: 5
      register: result
      until: result.rc == 0
    - include_role:
        name: "deadlinedb"
        tasks_from: "logs"
    # - name: fatal error will be unset if success
    #   set_fact:
    #     fatal_error: false
  rescue:
    - include_role:
        name: "deadlinedb"
        tasks_from: "logs"
    - shell: |
        ls -ltriah /var/lib/mongodb/
    # - name: fatal error
    #   set_fact:
    #     fatal_error: true
    - meta: end_play
  # always:
  # - meta: end_play
  #   when: fatal_error is defined and fatal_error
  # any_errors_fatal: yes