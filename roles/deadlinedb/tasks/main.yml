---
# tasks file for roles/deadlinedb

- name: Ensures dir exists
  file:
    path: "/deployuser/tmp/DeadlineDatabase10/mongo/backup/"
    state: directory
    owner: deadlineuser
  become: yes

- name: Find backups if present - DeadlineDatabase10
  find: paths=/opt/Thinkbox/DeadlineDatabase10/mongo/backup/ file_type=directory patterns="*"
  register: backup_paths
  become: yes

- name: Move backups if present out of the vm to conserve space.
  shell: sudo rsync --inplace --no-perms --omit-dir-times --no-o --no-g /opt/Thinkbox/DeadlineDatabase10/mongo/backup/* /deployuser/tmp/DeadlineDatabase10/mongo/backup --remove-source-files
  when: backup_paths.matched|int != 0
  become: yes

- name: Ensures dir exists
  file:
    path: "/deployuser/tmp/DeadlineRepository10/backup"
    state: directory
    owner: deadlineuser
  become: yes

- name: Find backups if present - DeadlineRepository10
  find: paths=/opt/Thinkbox/DeadlineRepository10/backup/ file_type=directory patterns="*"
  register: backup_paths_repo
  become: yes

- name: Move backups if present out of the vm to conserve space.
  shell: sudo rsync --inplace --no-perms --omit-dir-times --no-o --no-g /opt/Thinkbox/DeadlineRepository10/backup/* /deployuser/tmp/DeadlineRepository10/backup --remove-source-files
  when: backup_paths_repo.matched|int != 0
  become: yes

- name: diskspace-check
  include_role:
    name: diskspace-check

- name: s3-sync pull deadline installer
  include_role:
    name: s3-sync
  vars:
    mode: "pull"
    bucket: "{{ installers_bucket }}"
    basedir: "{{ deadline_linux_installers_tar | dirname }}"
    filename: "{{ deadline_linux_installers_tar | basename }}"
    variable_user: "deployuser" # deploy user has access to the default downloads folder.
  tags:
  - install
  - sync_installers

# - name: Sync deadline from s3 if exist - pull - with the aws user credentials
#   shell: |
#     # set -x
#     cd {{ deadline_linux_installers_tar | dirname }}/
#     aws s3 sync s3://{{ installers_bucket }}/ . --exclude "*" --include "{{ deadline_linux_installers_tar | basename }}"
#   args:
#     creates: "{{ deadline_linux_installers_tar | dirname }}/{{ deadline_linux_installers_tar | basename }}"
#   become: false
#   tags:
#   - install
#   - sync_installers

- name: "Ensures tar exists {{ deadline_linux_installers_tar }}"
  stat:
    path: "{{ deadline_linux_installers_tar }}"
  register: deadline_linux_installers_tar_stat
  become: yes

- name: "Test: Fail if not existing tar."
  fail:
    msg: "Bailing out: You need to place the installer in the download directory.  Installer not found - {{ deadline_linux_installers_tar }}"
  when: deadline_linux_installers_tar_stat.stat.exists == false or deadline_linux_installers_tar_stat.stat.isdir == True

- name: Ensures dir exists
  file:
    path: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
    state: directory
    owner: deadlineuser
  become: yes

- name: Ensures dir exists
  file:
    path: /opt/Thinkbox/certs
    state: directory
    owner: deadlineuser
  become: yes

- name: Extract
  unarchive:
    src: "{{ deadline_linux_installers_tar }}"
    dest: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
    owner: deadlineuser
    mode: u+x
  become: yes
  tags:
  - install

- name: "Ansible find files in subdirectory downloads"
  find:
    paths: /home/deadlineuser/Downloads/{{ deadline_linux_basename }}
    patterns: "*DeadlineRepository-{{ deadline_version }}-linux-x64-installer.run"
  register: files_matched
  become: true
  tags:
  - install
  - sync_installers

- name: set permissions
  file:
    path: "{{ files_matched.files[0].path }}"
    mode: u+r,u+x,u-w
    owner: deadlineuser
  become: true
  tags:
  - install

- name: check hugepages disabled
  shell: |
    cat /sys/kernel/mm/transparent_hugepage/enabled
  register: command_result
  failed_when: "'[never]' not in command_result.stdout"
  
- name: Install Deadline DB & pull latest log.
  block:
    - name: install deadline db
      shell: |
        # set -x
        cd /home/deadlineuser/Downloads/
        {{ files_matched.files[0].path }} --mode unattended --debuglevel 2 --prefix /opt/Thinkbox/DeadlineRepository10 --setpermissions true --installmongodb true --dbOverwrite true --mongodir /opt/Thinkbox/DeadlineDatabase10 --dbListeningPort 27017 --certgen_outdir /opt/Thinkbox/DeadlineDatabase10/certs --certgen_password {{ deadline_proxy_certificate_password }} --createX509dbuser true --requireSSL true --dbhost {{ openfirehawkserver }} --dbport 27017 --dbuser {{ user_deadlineuser_name }} --dbpassword {{ deadline_proxy_certificate_password }} --dbauth true --dbcertpass {{ deadline_proxy_certificate_password }} --dbssl true
      register: deadline_db_install_output_shell
      become: true
    - name: Started service for deadlinedb # may need process to wait for process to be started
      service:
        name: Deadline10db
        # state: started
        enabled: true
        # daemon_reload: true
      become: true
    # - name: Restart service for deadlinedb # may need process to wait for process to be started
    #   service:
    #     name: Deadline10db
    #     state: restarted
    #   become: true
    #   tags:
    #   - install
    - include_role:
        name: "deadlinedb"
        tasks_from: "logs"
  rescue:
    - include_role:
        name: "deadlinedb"
        tasks_from: "logs"
    - name: fatal
      set_fact:
        fatal_error: true
  always:
  - meta: end_play
    when: fatal_error is defined and fatal_error
  any_errors_fatal: yes
  tags:
  - install

- name: Get the current caller identity information
  aws_caller_info:
  register: caller_info
  become: false

- name: show aws caller info
  debug:
    var: caller_info

- name: s3-sync push deadline installer
  include_role:
    name: s3-sync
  vars:
    mode: "push"
    bucket: "{{ installers_bucket }}"
    basedir: "{{ deadline_linux_installers_tar | dirname }}"
    filename: "{{ deadline_linux_installers_tar | basename }}"
    variable_user: "deadlineuser"
  tags:
  - install
  - sync_installers

- name: check deadline db install output
  debug:
    msg: "{{ deadline_db_install_output_shell.stdout }}"
  tags:
  - install