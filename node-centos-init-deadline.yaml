- hosts: ansible_control
  remote_user: deployuser
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true
  
  vars:
    sync_downloads: false
    bucket: "{{ installers_bucket }}"

  tasks:
  - include_role:
      name: s3-bucket
    tags:
    - sync_installers

  # - name: ensure an s3 bucket exists to store large files / installers for faster redeployment.
  #   s3_bucket:
  #     name: "{{ bucket }}"
  #     region: "{{ aws_region }}"
  #   tags:
  #     - sync_installers



  # - name: ensure the deadline installer is syncronised with the bucket
  #   shell: |
  #     # set -x
  #     # aws sts get-caller-identity
  #     cd /deployuser/downloads/
  #     aws s3 sync . s3://{{ bucket }}/ --exclude "*" --include "{{ deadline_linux_filename }}"
  #   become_user: deployuser
  #   tags:
  #     - sync_installers

  # - name: ensure the deadline installer is syncronised with the bucket
  #   s3_sync:
  #     bucket: "{{ bucket }}"
  #     file_root: /deployuser/downloads/
  #     include: "{{ deadline_linux_filename }}"
  #     region: "{{ aws_region }}"
  #   tags:
  #     - sync_installers

  # - name: ensure the downloads folder is syncronised with the bucket
  #   s3_sync:
  #     bucket: "{{ bucket }}"
  #     file_root: /deployuser/downloads/
  #     include: "*"
  #     region: "{{ aws_region }}"
  #   when: sync_downloads
  #   tags:
  #     - sync_installers

### end steps to create new user

  - name: create Thinkbox dir
    file: 
      path: /opt/Thinkbox/
      state: directory
      mode: '0700'
      owner: deadlineuser
      group: syscontrol
    become: yes

  - name: create Thinkbox cert dir
    file: 
      path: /opt/Thinkbox/certs
      state: directory
      mode: '0700'
      owner: deadlineuser
      group: syscontrol
    become: yes

  - name: set deadline remote client certificate permissions locally
    file: 
      path: "{{ deadline_certificates_location }}/Deadline10RemoteClient.pfx"
      mode: '0644'
      owner: deadlineuser
      group: syscontrol
    become: yes
    connection: local

  - name: Copy deadline remote client certificate
    copy: 
      src: "{{ deadline_certificates_location }}/Deadline10RemoteClient.pfx"
      dest: "/opt/Thinkbox/certs/"
      mode: '0600'
      owner: deadlineuser
      group: syscontrol
    become: yes

  - name: Strange requirement here.  For some reason read permissions needed for everyone to be set above or the ansible copy doesn't work.  So we set it back to normal here.
    file: 
      path: "{{ deadline_certificates_location }}/Deadline10RemoteClient.pfx"
      mode: '0640'
      owner: deadlineuser
      group: syscontrol
    become: yes
    connection: local

  - name: create download dir
    file: 
      path: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
      state: directory
      owner: deadlineuser
      group: syscontrol
    become: yes

  # - name: S3 GET deadline
  #   aws_s3:
  #     bucket: "{{ bucket }}"
  #     object: "{{ deadline_linux_filename }}"
  #     dest: "/home/deadlineuser/Downloads/{{ deadline_linux_filename }}"
  #     mode: get
  #     # AWS_ACCESS_KEY: "{{ AWS_ACCESS_KEY }}"
  #     # AWS_SECRET_KEY: "{{ AWS_SECRET_KEY }}"
  #     region: "{{ aws_region }}"

  - name: s3-sync pull deadline installer
    include_role:
      name: s3-sync
    vars:
      mode: "pull"
      bucket: "{{ bucket }}"
      basedir: "/home/deadlineuser/Downloads"
      filename: "{{ deadline_linux_filename }}"
      variable_user: "deadlineuser"

  # - name: Sync deadline from s3 if exist and not present on file system- pull
  #   shell: |
  #     # set -x
  #     cd /home/deadlineuser/Downloads
  #     ~/.local/bin/aws s3 sync s3://{{ bucket }}/ . --exclude "*" --include "{{ deadline_linux_filename }}"
  #   become_user: "{{ variable_user }}"

  - name: create deadline installer dir
    file: 
      path: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
      state: directory
      owner: deadlineuser
      group: syscontrol
    become: yes


  - name: Extract
    unarchive:
      src: "/home/deadlineuser/Downloads/{{ deadline_linux_filename }}"
      dest: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
      owner: deadlineuser
      mode: u+x
      remote_src: true
    become: yes

  - name: "Ansible find files in subdirectory downloads"
    find:
      paths: "/home/deadlineuser/Downloads/{{ deadline_linux_basename }}"
      patterns: "*DeadlineClient-{{ deadline_version }}-linux-x64-installer.run"
    register: files_matched
    become: true

  - debug:
      msg: "installer path: {{ files_matched.files[0].path }}"
  
  - name: set execute permissions on installer
    file:
      path: "{{ files_matched.files[0].path }}"
      mode: '0700'
      owner: deadlineuser
      group: syscontrol
    become: yes

  - name: deadline dependencies
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - redhat-lsb
      - samba-client
      - samba-common
      - cifs-utils
      - nfs-utils
      - nload
      - tree
      - bzip2
      - nmap
      #- nfs-utils-lib

# mounts are being tested in node-sentos-mounts.yaml now.
      
  # # mount softnas and remote nas
  # - name: create mount directories
  #   file: 
  #     path: "{{ item }}"
  #     state: directory
  #     owner: deadlineuser
  #     group: deadlineuser
  #   become: yes
  #   with_items:
  #     - "{{ softnas1_path_abs }}"
  #     - "{{ localnas1_path_abs }}"
  #     - "{{ prod_mount_path }}"
  #     - "{{ localnas1_remote_mount_path }}"

  # - name: create localnas mount point based on location
  #   file: 
  #     path: "{{ localnas1_path_abs }}"
  #     state: directory
  #     owner: deadlineuser
  #     group: deadlineuser
  #   become: yes

  # - name: insert marker start
  #   lineinfile:
  #     path: /etc/fstab
  #     insertafter: "^#?UUID.*$"

  #     line: "# BEGIN ANSIBLE MANAGED BLOCK"
  #     backup: yes

  # - name: insert marker end
  #   lineinfile:
  #     path: /etc/fstab
  #     insertafter: "# BEGIN ANSIBLE MANAGED BLOCK"
  #     line: "# END ANSIBLE MANAGED BLOCK"
  #     create: true
 
  # - name: insert/update block in /etc/fstab
  #   blockinfile:
  #     path: /etc/fstab
  #     backup: yes
  #     content: |

  #       {{ groups['role_softnas'][0] }}:{{ softnas_mount_source }} {{ softnas1_path_abs }} nfs4 rsize=8192,wsize=8192,timeo=14,intr,_netdev 0 0
  #       {{ softnas1_path_abs }} {{ prod_mount_path }} none defaults,bind,timeo=14 0 0

  #       # {{ localnas1_private_ip }}:{{ localnas1_mount_path }} {{ localnas1_path_abs }} nfs4 rsize=8192,wsize=8192,timeo=14,intr,_netdev 0 0
  #       # {{ localnas1_path_abs }} {{ localnas1_remote_mount_path }} none defaults,bind,timeo=14 0 0
        
  # - name: mount all changes to fstab
  #   command: mount -a
  #   become: true

  - stat:
      path: /var/lib/Thinkbox/Deadline10/deadline.ini
    register: deadline_ini_file

  - name: get date
    shell: |
      date +"%Y%m%d_%H%M%S"
    register: current_date

  - set_fact:
      backup_dest: "/var/lib/Thinkbox/Deadline10/deadline.bak_{{ current_date.stdout }}"
    when: deadline_ini_file.stat.exists

  - debug:
      msg: "will backup file to {{ backup_dest }}"
    when: deadline_ini_file.stat.exists

  - name: move old config to backup.  this prevents old conf settings staying around.
    command: "mv /var/lib/Thinkbox/Deadline10/deadline.ini {{ backup_dest }}"
    when: deadline_ini_file.stat.exists

  - name: install deadline client
    shell: |
      cd /home/deadlineuser/Downloads/
      # set -x
      {{ files_matched.files[0].path }} --mode unattended --debuglevel 2 --prefix {{ deadline_prefix }} --connectiontype Remote --noguimode true --licensemode UsageBased --launcherdaemon true --slavestartup 1 --daemonuser {{ user_deadlineuser_name }} --enabletls true --tlsport 4433 --httpport 8080 --proxyrootdir {{ deadline_proxy_root_dir }} --proxycertificate {{ deadline_proxy_certificate }} --proxycertificatepassword {{ deadline_proxy_certificate_password }}
    register: deadline_client_install_output_shell
    become: true
    
  - name: check deadline client install output
    debug:
      msg: "{{ deadline_client_install_output_shell.stdout }}"

  - name: check /var/lib/Thinkbox/Deadline10/deadline.ini
    command: cat /var/lib/Thinkbox/Deadline10/deadline.ini 
    register: deadline_config

  - debug: msg="{{ deadline_config.stdout }}"
  - debug: msg="{{ deadline_config.stderr }}"

