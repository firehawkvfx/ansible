---
ansible_ssh_private_key_file: "{{ lookup('env','TF_VAR_local_key_path') }}"
ANSIBLE_FORCE_COLOR: 'true'

debug: 0

envtier: "{{ lookup('env','TF_VAR_envtier') }}"

show: "{{ lookup('env','TF_VAR_SHOW') }}"
seq: "{{ lookup('env','TF_VAR_SEQ') }}"
shot: "{{ lookup('env','TF_VAR_SHOT') }}"

gatewaynic: "{{ lookup('env','TF_VAR_gatewaynic') }}"

terraform_version: "0.11.14"
terraform_inventory_version: "0.8"

# domains
public_domain: "{{ lookup('env','TF_VAR_public_domain') }}"
# in most cases only the above public_domain should be referenced, which can be switched between dev and prod based on the environment - envtier
# the below public_domain_prod is used in some rare cases where multiple instances of infrastructure may not be not possible, like with a licence server.
# eg I may need to reference houdinilicenceserver.prod.example.com in both the prod and dev environments for render nodes to be tested.
public_domain_prod: "{{ lookup('env','TF_VAR_public_domain_prod') }}"

private_subnet1: "{{ lookup('env', 'TF_VAR_private_subnet1') }}"
private_subnet1_dev: "{{ lookup('env', 'TF_VAR_private_subnet1_dev') }}"
private_subnet1_prod: "{{ lookup('env', 'TF_VAR_private_subnet1_prod') }}"

private_subnet2: "{{ lookup('env', 'TF_VAR_private_subnet2') }}"
private_subnet2_dev: "{{ lookup('env', 'TF_VAR_private_subnet2_dev') }}"
private_subnet2_prod: "{{ lookup('env', 'TF_VAR_private_subnet2_prod') }}"

public_subnet1: "{{ lookup('env', 'TF_VAR_public_subnet1') }}"
public_subnet1_dev: "{{ lookup('env', 'TF_VAR_public_subnet1_dev') }}"
public_subnet1_prod: "{{ lookup('env', 'TF_VAR_public_subnet1_prod') }}"

public_subnet2: "{{ lookup('env', 'TF_VAR_public_subnet2') }}"
public_subnet2_dev: "{{ lookup('env', 'TF_VAR_public_subnet2_dev') }}"
public_subnet2_prod: "{{ lookup('env', 'TF_VAR_public_subnet2_prod') }}"

### NAS volume mounts ###

softnas_mount_source: "/pool0/volume0"
# "-m" will force a pool to import, which is usefull if drives used for a write log are missing.
zpool_import_flags: "-m"

#production mount path for all locations
prod_mount_path: "/prod"

#the ip of your onsite storage to be mounted
localnas1_private_ip: "{{ lookup('env','TF_VAR_localnas1_private_ip') }}"
#the mount path of your onsite storage eg "/prod"
localnas1_mount_path: "{{ lookup('env','TF_VAR_localnas1_mount_path') }}"
#the relative path to access the production volume remotely eg "/prod_remote"
localnas1_remote_mount_path: "{{ lookup('env','TF_VAR_localnas1_remote_mount_path') }}"
#the absolute path to access the onsite nas mount by location eg "/cairns_prod"
localnas1_path_abs: "{{ lookup('env', 'TF_VAR_localnas1_path_abs') }}"
#the absolute path to access the cloud nfs mount by location eg "/prod_sydney_aws"
softnas1_path_abs: "{{ lookup('env', 'TF_VAR_softnas1_path_abs') }}"

#the path to the firehawk houdinitools repository eg "/prod/assets/openfirehawk-houdini-tools"
firehawk_houdini_tools: "{{ lookup('env', 'TF_VAR_firehawk_houdini_tools') }}"

softnas1_private_ip1: "{{ lookup('env', 'TF_VAR_softnas1_private_ip1') }}"
softnas1_private_ip1_dev: "{{ lookup('env', 'TF_VAR_softnas1_private_ip1_dev') }}"
softnas1_private_ip1_prod: "{{ lookup('env', 'TF_VAR_softnas1_private_ip1_prod') }}"

deadlineversion: "{{ lookup('env', 'TF_VAR_deadlineversion') }}"

deadline_certificates_location: "/opt/Thinkbox/certs"
deadline_linux_installers_tar: "/vagrant/downloads/Deadline-{{ deadlineversion }}-linux-installers.tar"
deadline_prefix: "/opt/Thinkbox/Deadline10"

deadline_linux_no_extension: "{{ deadline_linux_installers_tar | splitext | first }}"
deadline_linux_basename: "{{ deadline_linux_no_extension.split('/')[-1] }}"
deadline_linux_filename: "{{ deadline_linux_installers_tar.split('/')[-1] }}"

### Vault Variables ###

db_pass: "{{ lookup('env','TF_VAR_db_pass') }}"

sesi_username: "{{ lookup('env','TF_VAR_sesi_username') }}"
sesi_password: "{{ lookup('env','TF_VAR_sesi_password') }}"

vpn_cidr: "{{ lookup('env','TF_VAR_vpn_cidr') }}"
vpn_cidr_dev: "{{ lookup('env','TF_VAR_vpn_cidr_prod') }}"
vpn_cidr_prod: "{{ lookup('env','TF_VAR_vpn_cidr_prod') }}"
remote_subnet_cidr: "{{ lookup('env','TF_VAR_remote_subnet_cidr') }}"

openvpn_user: openvpnas
openvpn_user_pw: "{{ lookup('env','TF_VAR_openvpn_user_pw') }}"

user_softnas_pw: "{{ lookup('env','TF_VAR_user_softnas_pw') }}"

user_deadlineuser_name: "{{ lookup('env','TF_VAR_user_deadlineuser_name') }}"
user_deadlineuser_pw: "{{ lookup('env','TF_VAR_user_deadlineuser_pw') }}"

user_deadlineuser_pw_local: "{{ lookup('env','TF_VAR_user_deadlineuser_pw_local') }}"
onsite_workstation_ssh_key: "{{ lookup('env','TF_VAR_onsite_workstation_ssh_key') }}"

openfirehawkserver: "{{ lookup('env','TF_VAR_openfirehawkserver') }}"
openfirehawkserver_dev: "{{ lookup('env','TF_VAR_openfirehawkserver_dev') }}"
openfirehawkserver_prod: "{{ lookup('env','TF_VAR_openfirehawkserver_prod') }}"
openfirehawkserver_name: "{{ lookup('env', 'TF_VAR_openfirehawkserver_name') }}"

deadline_proxy_root_dir: "{{ lookup('env','TF_VAR_deadline_proxy_root_dir') }}"
deadline_proxy_certificate: "{{ lookup('env','TF_VAR_deadline_proxy_certificate') }}"
deadline_proxy_certificate_password: "{{ lookup('env','TF_VAR_deadline_proxy_certificate_password') }}"

houdini_license_server_address: "{{ lookup('env','TF_VAR_houdini_license_server_address') }}"
# houdini_build: "{{ lookup('env','TF_VAR_houdini_build') }}"
# houdini_major_version: "18.0"
# houdini_minor_version: "auto"
# this list is used for deadline plugin compatibility
houdini_major_version_list:
    - '17.5'
    - '18.0'

# this list of dictionaries is use to install multiple versions of houdini.
# versions should be listed from oldest to newest.
houdini_version_list:
- houdini_major_version: "17.5"
  houdini_auto_version: False
  # houdini_auto_version: auto latest version can only be used for the latest daily/produciton build visible to your account.
  # eg, if houdini 18 is released and visible in your downloads from your account, then auto cannot be used for 17.5.
  # to install any older version that is not the latest (auto), that version .tar.gz must exist in your s3 bucket.
  # when using auto, the installer will be uploaded to your s3 bucket.
  houdini_minor_version: "17.5.327"
  # houdini_minor_version: eg "17.5.327" or "auto"
  houdini_linux_filename: "houdini-17.5.327-linux_x86_64_gcc6.3.tar.gz"
  # houdini_linux_filename: file to install from s3 bucket eg: "houdini-17.5.327-linux_x86_64_gcc6.3.tar.gz" or "auto"
  houdini_build: "daily"
  # houdini_build: used to download latest "daily" or "production" build when other options set to auto.  eg: "daily" or "production"
  # enforce_env: False
  # only set this for a maximum of 1 version in the list.  It will enforce the houdini environment for all shells opened.
- houdini_major_version: "18.0"
  houdini_auto_version: True
  houdini_minor_version: "auto"
  houdini_linux_filename: "auto"
  houdini_build: "daily"
  # enforce_env: False

firehawk_sync_source: "{{ lookup('env','TF_VAR_firehawk_sync_source') }}"

aws_region: "{{ lookup('env','TF_VAR_aws_region') }}"
AWS_REGION: "{{ lookup('env','TF_VAR_aws_region') }}"

aws_access_key: "{{ lookup('env','TF_VAR_aws_access_key') }}"
AWS_ACCESS_KEY: "{{ lookup('env','TF_VAR_aws_access_key') }}"

aws_secret_key: "{{ lookup('env','TF_VAR_aws_secret_key') }}"
AWS_SECRET_KEY: "{{ lookup('env','TF_VAR_aws_secret_key') }}"

aws_access_key_s3user: "{{ lookup('env','TF_VAR_aws_access_key_s3user') }}"
aws_secret_key_s3user: "{{ lookup('env','TF_VAR_aws_secret_key_s3user') }}"


s3_disk_password: "{{ lookup('env','TF_VAR_s3_disk_password') }}"
s3_disk_size: "{{ lookup('env','TF_VAR_s3_disk_size') }}"

ebs_disk_size: "{{ lookup('env','TF_VAR_ebs_disk_size') }}"

key_name: "{{ lookup('env','TF_VAR_key_name') }}"
local_key_path: "{{ lookup('env','TF_VAR_local_key_path') }}"

time_zone_info_dict_linux: {
Australia_Sydney: "/usr/share/zoneinfo/Australia/Sydney"
}

time_zone_info_path_linux: "{{ time_zone_info_dict_linux['Australia_Sydney'] }}"

### SECRETS AND PEM KEYS

repo_dir: "{{ playbook_dir.split('/')[0:-1]|join('/') }}"

vault_key_name: ".vault-key-{{ envtier }}"
vault_key_path: "{{ repo_dir }}/keys/{{ vault_key_name }}"

key_folder: "{{ repo_dir }}/keys/"

key_path: "{{ repo_dir }}/keys/{{ key_name }}.pem"
secret_path: "{{ repo_dir }}/secrets/secrets-{{ envtier }}"
secrets_archive: "{{ repo_dir }}/secrets/{{ envtier }}"