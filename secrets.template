# ~/.bashrc

# The contents of secrets.template are modified by update_vars.sh.
# Editing these contents should only be done in secrets/secrets-dev or secrets/secrets-prod, and then propogated with source ./update_vars.sh

# WARNING: When editing your secrets files manually do not store any secrets / sensitive information in #commented lines in these files.
# Do not store any secrets as keys in any lines
# Secrets should only ever be stored as values in uncommented lines.

# SECRETS INITIALIZATION #

# Secrets must be used as values only, since it is only the values that are kept private.
# Comments and variable names / keys are read from your private secrets/secrets-dev or secrets/secrets-prod file in your private repo to auto generate the public firehawk/secrets.template file when running 'source ./update_vars.sh'.

# If these steps are followed then no private values will be or should be propogated into the public repo firehawk/secrets.template file.
# Before making any commits to the public firehawk repo ensure there are no secrets / sensitive information contained in commits.
# Be sure to provide any new variable keys you may end up adding with a commented out description with example dummy values above your actual secret value used to assist others.

# Do not put real world sensitive information in the example comments.

# New comments should be only added in secrets-dev or secrets-prod as these lines will be propogated into the secrets.template schema used to initialise any new  secrets/secrets-dev or secrets/secrets-prod files.

# BEGIN CONFIGURATION #

# TF_VAR_sesi_username:
# Your side fx email are used by the node-centos-houdini.yaml script to download and install houdini
# eg: TF_VAR_sesi_username='myemail@login.com'
TF_VAR_sesi_username=insertvalue

# TF_VAR_sesi_password:
# Your side fx password used by the node-centos-houdini.yaml script to download and install houdini
# eg: TF_VAR_sesi_password=mySuperSecretPassword
TF_VAR_sesi_password=insertvalue

# TF_VAR_vagrant_password_prod:
# The password required to ssh into the vagrant vm (prod).
# eg: TF_VAR_vagrant_password_prod='MySuperSecretUniquePasswordForProd'
TF_VAR_vagrant_password_prod=insertvalue

# TF_VAR_vagrant_password_dev:
# The password required to ssh into the vagrant vm (dev).
# eg: TF_VAR_vagrant_password_dev='MySuperSecretUniquePasswordForDev'
TF_VAR_vagrant_password_dev=insertvalue

# TF_VAR_db_pass:
# The password to configure and connect with the Deadline DB.  This password will be provisioned during installation.
# eg: TF_VAR_db_pass='MySuperSecretUniqueDeadlineDBPass'
TF_VAR_db_pass=insertvalue

# TF_VAR_openvpn_user:
# The OpenVPN Access Server username.  Changing this is not currently supported pbut planned as it may require changes to accomodate it with the Open VPN provisioning stage.
# default: TF_VAR_openvpn_user=openvpnas
TF_VAR_openvpn_user=insertvalue

# TF_VAR_openvpn_user_pw:
# The password for open vpn web ui login.
# Ensure the admin and user passwords are different to the example, but match each other.
# eg: TF_VAR_openvpn_user_pw=MyUniqueSecretVPNPassword
TF_VAR_openvpn_user_pw=insertvalue

# TF_VAR_openvpn_admin_user:
# The OpenVPN Access Server admin username.  Changing this is not currently supported pbut planned as it may require changes to accomodate it with the Open VPN provisioning stage.
# default: TF_VAR_openvpn_admin_user=openvpnas
TF_VAR_openvpn_admin_user=insertvalue

# TF_VAR_openvpn_admin_pw:
# The password for open vpn web ui login.
# Ensure the admin and user passwords are different to the example, but match each other.
# eg: TF_VAR_openvpn_admin_pw=MyUniqueSecretVPNPassword
TF_VAR_openvpn_admin_pw=insertvalue

# TF_VAR_user_softnas_pw:
# The password used to login to softnas at https://{the softnas ip}
# eg: TF_VAR_user_softnas_pw=MySecretSoftnasPAssword
TF_VAR_user_softnas_pw=insertvalue

# TF_VAR_user_deadlineuser_name:
# A deadline user account is created to simplify handling of permissions for render nodes and services. Changing this value is not currently supported.
# default: TF_VAR_user_deadlineuser_name=deadlineuser
TF_VAR_user_deadlineuser_name=insertvalue

# TF_VAR_user_deadlineuser_pw:
# The password for the deadlineuser
# eg: TF_VAR_user_deadlineuser_pw=MyUniquePasswordForDeadlineUser
TF_VAR_user_deadlineuser_pw=insertvalue

# TF_VAR_user_deadlineuser_pw_local:
# The password for the deadline user ssh access on onsite workstations / render nodes if different.
# eg: TF_VAR_user_deadlineuser_pw_local=MyLocalUserPassForSSH
TF_VAR_user_deadlineuser_pw_local=insertvalue

# TF_VAR_onsite_workstation_ssh_key:
# the path to the rsa key to copy its id to other local workstations for provisioning.  This is best left at its default value.
# default: TF_VAR_onsite_workstation_ssh_key=/home/vagrant/.ssh/id_rsa
TF_VAR_onsite_workstation_ssh_key=insertvalue

# TF_VAR_pgp_key_path_dev:
# the path to the pgp key for the dev environment.  the default should be fine.  ensure that unencrypted keys are never commited to version control.  this path should be in git ignore, or build a CI workflow to ensure that keys are encrypted before any commits occur.
# default: TF_VAR_pgp_key_path_dev=/secrets/keys/.pgp-key-dev
TF_VAR_pgp_key_path_dev=insertvalue

# TF_VAR_pgp_key_path_prod:
# the path to the pgp key for the prod environment.  the default should be fine.  ensure that unencrypted keys are never commited to version control.  This path (/secrets/keys/) should be in git ignore, or build a CI workflow to ensure that keys are encrypted before any commits occur.
# default: TF_VAR_pgp_key_path_prod=/secrets/keys/.pgp-key-prod
TF_VAR_pgp_key_path_prod=insertvalue

# TF_VAR_usage_based_url:
# The URL provided by Thinkbox for your Usage Based Licencing credits.  Thinkbox have instructed that you will have to purchase UBL credits from the thinkbox store. If you contact thinkbox after this over email and notify them that this is for use in AWS they will credit this to your AWS account since Deadline is free with AWS!
# eg: TF_VAR_usage_based_url=https://thinkbox.compliance.flexnetoperations.com/instances/KJ32H45K2J3H/request
TF_VAR_usage_based_url=insertvalue

# TF_VAR_usage_based_activation_code:
# The 16 digit activation code provided by Thinkbox for your usage based licencing.
# eg: TF_VAR_usage_based_activation_code=H58H-J4N6-3H5B-J6N7
TF_VAR_usage_based_activation_code=insertvalue

# TF_VAR_deadline_proxy_certificate:
# The path to the deadline proxy certificate that will be created.  During deadline installation, the certifcate at this location is generated for remote clients to identify them selves to have access via the Deadline Remote Connection Server.
# default: TF_VAR_deadline_proxy_certificate=/opt/Thinkbox/certs/Deadline10RemoteClient.pfx
TF_VAR_deadline_proxy_certificate=insertvalue

# TF_VAR_deadline_proxy_certificate_password:
# The password for the TLS certificate used to connect to Deadline Remote Conetion Server. 
# eg: TF_VAR_deadline_proxy_certificate_password="MySecretProxyPassword"
TF_VAR_deadline_proxy_certificate_password=insertvalue

# TF_VAR_aws_region:
# Your AWS default region.  This should be your nearest AWS datacentre for the best latency/performance.
# default: TF_VAR_aws_region=ap-southeast-2
TF_VAR_aws_region=insertvalue

# TF_VAR_keybase_secret:
# Your Keybase.io password. You will need to setup a keybase account at keybase.io for PGP decryption of AWS keys from Terraform.  Ensure you configure it on a second device like a mobile for MFA, since keybase installs in VM's will likely be erased during testing, and you will need a second device to authorise again.
# eg: TF_VAR_keybase_secret=MyKeybaseSecretPassword
TF_VAR_keybase_secret=insertvalue

# TF_VAR_aws_access_key_dev:
# The access key id for your AWS user to use for provisioning with terraform.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during dev until the rollout is stable.
# eg: TF_VAR_aws_access_key_dev=34JB234K5JB34K5JB
TF_VAR_aws_access_key_dev=insertvalue

# TF_VAR_aws_secret_key_dev:
# The secret key for your AWS user to use for provisioning with terraform.
# eg: TF_VAR_aws_secret_key_dev=32KJB124kjb34kjb2341kjb23JBHLJ
TF_VAR_aws_secret_key_dev=insertvalue

# TF_VAR_aws_access_key_s3user_dev:
# The access key id for the AWS user with S3 read and write permissions.  Onsite nodes will use these permissions to sync installers and production data to S3 buckets.
# eg: TF_VAR_aws_access_key_s3user_dev=KJ435K3J452K35JB23
TF_VAR_aws_access_key_s3user_dev=insertvalue

# TF_VAR_aws_secret_key_s3user_dev:
# The secret key for the AWS user with S3 read and write permissions.
# eg: TF_VAR_aws_secret_key_s3user_dev=DH/ASDG45+32gsdg434tGDFG
TF_VAR_aws_secret_key_s3user_dev=insertvalue

# TF_VAR_aws_access_key_prod:
# The access key id for your AWS user to use for provisioning with terraform in the production environment.  We often use a seperate AWS account for dev and prod to protect the prod environment and have seperate public domains.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during developement until the rollout is stable.
# eg: TF_VAR_aws_access_key_prod=34JB234K5JB34K5JB
TF_VAR_aws_access_key_prod=insertvalue

# TF_VAR_aws_secret_key_prod:
# The access key id for your AWS user to use for provisioning with terraform in the production environment.  We often use a seperate AWS account for dev and prod to protect the prod environment and have seperate public domains.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during developement until the rollout is stable.
# eg: TF_VAR_aws_secret_key_prod=SH5+e5h/e5EHDGHhr5rddh
TF_VAR_aws_secret_key_prod=insertvalue

# TF_VAR_aws_access_key_s3user_prod:
# The access key id for the AWS user with S3 read and write permissions in the prod environment.  Onsite nodes will use these permissions to sync installers and production data to S3 buckets.
# eg: TF_VAR_aws_access_key_s3user_prod=KJ435K3J452K35JB23
TF_VAR_aws_access_key_s3user_prod=insertvalue

# TF_VAR_aws_secret_key_s3user_dev:
# The secret key for the AWS user with S3 read and write permissions in the prod environment.
# eg: TF_VAR_aws_secret_key_s3user_dev='DH4356DFGDh/drthe5Eg4egbdg4drgsg'
TF_VAR_aws_secret_key_s3user_prod=insertvalue

# TF_VAR_s3_disk_password:
# Softnas will use this password to encrypt s3 buckets for s3 disks.
# eg: TF_VAR_s3_disk_password=MyEncryptedS3Password
TF_VAR_s3_disk_password=insertvalue

# TF_VAR_route_zone_id_dev:
# The route zone id for the dev domain name in your dev AWS account.  Your aws account will need a public domain name in the account (route 53) in order to assign public routes for DNS.  Once this is established in your account, insert the route zone id here for Terraform to create addresses for systems that are publicly accessible, like vpn and bastion hosts.
# eg: TF_VAR_route_zone_id_dev=432LJN23TLJN3V
TF_VAR_route_zone_id_dev=insertvalue

# TF_VAR_route_zone_id_dev:
# The route zone id for the prod domain name in your prod AWS account.  This should be unique to the dev account, but it maybe possible to avoid with further developement.  Your aws account will need a public domain name in the account (route 53) in order to assign public routes for DNS.  Once this is established in your account, insert the route zone id here for Terraform to create addresses for systems that are publicly accessible, like vpn and bastion hosts.
# eg: TF_VAR_route_zone_id_dev=KJ2352KJ235LJ
TF_VAR_route_zone_id_prod=insertvalue

# TF_VAR_cert_arn_dev:
# The ARN for the SSL certificate of your public dev domain in the AWS dev account.  You will have an SSL certificate for any public domain in aws, and this has an ARN associated with it.
# eg: TF_VAR_cert_arn_dev="arn:aws:acm:ap-southeast-2:322531242314:certificate/adsfljnf3-234g-5634-3245-42kjh243kj"
TF_VAR_cert_arn_dev=insertvalue

# TF_VAR_cert_arn_prod:
# The ARN for the SSL certificate of your public prod domain in the AWS prod account.  You will have an SSL certificate for any public domain in aws, and this has an ARN associated with it.
# eg: TF_VAR_cert_arn_prod="arn:aws:acm:ap-southeast-2:322531242314:certificate/adsfljnf3-234g-5634-3245-42kjh243kj"
TF_VAR_cert_arn_prod=insertvalue

# TF_VAR_public_domain_prod:
# The public prod domain name in the AWS prod account.  You can purchase a cheap domain in aws with lesser known extensions for testing and use this here. Launched Infrastructure will switch between different domains depending on the staging environment for isolation. Some resources, like licences servers, may exist in a single domain (usually prod), since they often are not dynamic.
# eg: TF_VAR_public_domain_prod=devexample.com
TF_VAR_public_domain_prod=insertvalue

# TF_VAR_public_domain_dev:
# The public dev domain name in the AWS dev account.  You can purchase a cheap domain in AWS with lesser known extensions for testing and use this here. Launched Infrastructure will switch between different domains depending on the staging environment for isolation. Some resources, like licence servers, may exist in a single domain (usually prod), since they often are not dynamic and cant be moved easily.
# eg: TF_VAR_public_domain_dev=devexample.com
TF_VAR_public_domain_dev=insertvalue

# TF_VAR_key_name_dev:
# The name of the key pair used in the dev environment. You will create a key pair to access your aws instances, listed here.
# default: TF_VAR_key_name_dev=my_key_pair_dev
TF_VAR_key_name_dev=insertvalue

# TF_VAR_local_key_path_dev:
# the path to the keypair from within the vagrant VM.
# default: TF_VAR_local_key_path_dev=/secrets/keys/my_key_pair_dev.pem
TF_VAR_local_key_path_dev=insertvalue

# TF_VAR_key_name_prod:
# The name of the key pair used in the prod environment. You will create a key pair to access your AWS instances, listed here.
# default: TF_VAR_key_name_prod=my_key_pair_prod
TF_VAR_key_name_prod=insertvalue

# TF_VAR_local_key_path_prod:
# the path to the keypair from within the vagrant VM.
# default: TF_VAR_local_key_path_prod=/secrets/keys/my_key_pair_prod.pem
TF_VAR_local_key_path_prod=insertvalue

# TF_VAR_softnas_mailserver:
# mailserver details for softnas notifications
# eg: TF_VAR_softnas_mailserver="mymailserver.mydomain.com"
TF_VAR_softnas_mailserver=insertvalue

# TF_VAR_softnas_smtp_port:
# mailserver details for softnas notifications
# default: TF_VAR_softnas_smtp_port="26"
TF_VAR_softnas_smtp_port=insertvalue

# TF_VAR_softnas_smtp_username:
# mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_username="user@mydomain.com"
TF_VAR_softnas_smtp_username=insertvalue

# TF_VAR_softnas_smtp_password:
# mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_password="MyMailPassword324"
TF_VAR_softnas_smtp_password=insertvalue

# TF_VAR_softnas_smtp_from:
# mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_from="user@mydomain.com"
TF_VAR_softnas_smtp_from=insertvalue

# TF_VAR_smtp_encryption:
# mailserver details for softnas notifications
# default: TF_VAR_smtp_encryption="none"
TF_VAR_smtp_encryption=insertvalue
