# ~/.bashrc

# The contents of secrets.template are modified by update_vars.sh.
# Editing these contents should only be done in secrets/secrets-dev or secrets/secrets-prod, and then propogated with source ./update_vars.sh

# WARNING: When editing your secrets files manually do not store any secrets / sensitive information in #commented lines in these files.
# Do not store any secrets as keys in any lines
# Secrets should only ever be stored as values in uncommented lines.

# SECRETS INITIALIZATION #

# Secrets must be used as values only, since it is only the values that are kept private.
# Comments and variable names / keys are read from your private secrets/secrets-dev or secrets/secrets-prod file in your private repo to auto generate the public firehawk/secrets.template file when running 'source ./update_vars.sh'.

# If these steps are followed then no private values will be or should be propogated into the public repo firehawk/secrets.template file.
# Before making any commits to the public firehawk repo ensure there are no secrets / sensitive information contained in commits.
# Be sure to provide any new variable keys you may end up adding with a commented out description with example dummy values above your actual secret value used to assist others.

# Do not put real world sensitive information in the example comments.

# New comments should be only added in secrets-dev or secrets-prod as these lines will be propogated into the secrets.template schema used to initialise any new  secrets/secrets-dev or secrets/secrets-prod files.

# BEGIN CONFIG #

# TF_VAR_bridgenic: The NIC vagrant uses to bridge its connection 
# If you don't know the exact string for the bridgenic (found on 'vagrant up' eg: '1) en0: Wi-Fi (AirPort)') then leave it as 'none'
# eg 1: TF_VAR_bridgenic=none
# eg 2: TF_VAR_bridgenic=1) en0: Wi-Fi (AirPort)
TF_VAR_bridgenic=insertvalue

# TF_VAR_gatewaynic: The gateway used from the vm used to access the network or internet.  type 'ip a' in the vagrant shell to see a list of possible NICs.
# eg: TF_VAR_gatewaynic=eth1
TF_VAR_gatewaynic=insertvalue

# TF_VAR_sesi_username: Your side fx email are used by the node-centos-houdini.yaml script to download and install houdini
# eg: TF_VAR_sesi_username='myemail@login.com'
TF_VAR_sesi_username=insertvalue

# TF_VAR_sesi_password: Your side fx password used by the node-centos-houdini.yaml script to download and install houdini
# eg: TF_VAR_sesi_password='mySuperSecretPassword'
TF_VAR_sesi_password=insertvalue


# TF_VAR_vagrant_password_prod: The password required to ssh into the vagrant vm (prod).
# eg: TF_VAR_vagrant_password_prod='MySuperSecretUniquePasswordForProd'
TF_VAR_vagrant_password_prod=insertvalue

# TF_VAR_vagrant_password_dev: The password required to ssh into the vagrant vm (dev).
# eg: TF_VAR_vagrant_password_dev='MySuperSecretUniquePasswordForDev'
TF_VAR_vagrant_password_dev=insertvalue

# TF_VAR_inventory_dev: The relative path to the inventory maintained for ansible from the /vagrant path.
# This should exist outside the public repository and the default should be used.
# default: TF_VAR_inventory_dev=../secrets/dev/inventory
TF_VAR_inventory_dev=insertvalue

# TF_VAR_inventory_prod: The relative path to the inventory maintained for ansible from the /vagrant path.
# This should exist outside the public repository and the default should be used.
# default: TF_VAR_inventory_prod=../secrets/prod/inventory
TF_VAR_inventory_prod=insertvalue

# TF_VAR_softnas_storage: Enable softnas storage.  Softnas is used for a centralised cloud based NFS share.
# It's licenceing cost scales with usage, and can provide RAID redundancy.
# default: TF_VAR_softnas_storage=true
TF_VAR_softnas_storage=insertvalue

# TF_VAR_site_mounts: Enable site NFS mounts to be mounted on remote nodes.  If you have an existing local NFS share from your own NAS, it can be provided as a remote mount over vpn for cloud based nodes.  Operating with a local NFS share is requried for PDG/TOPS to function.
# default: TF_VAR_site_mounts=true
TF_VAR_site_mounts=insertvalue

# TF_VAR_remote_mounts_on_local: Enable cloud NFS mounts to be mounted on local nodes.  After the VPN is connected, the remote SoftNAS NFS shares can be mounted on the local workstation.  This is necesary for PDG/TOPS to track completed work items, and allow remote deletion of data.
# default: TF_VAR_remote_mounts_on_local=true
TF_VAR_remote_mounts_on_local=insertvalue

# TF_VAR_private_subnet1_prod: The production IP range for private subnet 1 for workers.  This subnet is accessed via VPN or bastion hosts.
# default: TF_VAR_private_subnet1_prod=10.0.1.0/24
TF_VAR_private_subnet1_prod=insertvalue

# TF_VAR_private_subnet2_prod: The production IP range for private subnet 2 for workers.  This subnet is accessed via VPN or bastion hosts.
# default: TF_VAR_private_subnet2_prod=10.0.2.0/24
TF_VAR_private_subnet2_prod=insertvalue

# TF_VAR_public_subnet1_prod: The production IP range for public subnet 1 for public facing  systems.  examples are your VPN access server instance, or bastion host for provisioning other instances in the private network.
# default: TF_VAR_public_subnet1_prod=10.0.101.0/24
TF_VAR_public_subnet1_prod=insertvalue

# TF_VAR_public_subnet2_prod: The production IP range for public subnet 2 for public facing systems.  examples are your VPN access server instance, or bastion host for provisioning other instances in the private network.
# default: TF_VAR_public_subnet2_prod=10.0.102.0/24
TF_VAR_public_subnet2_prod=insertvalue

# TF_VAR_private_subnet1_dev: The dev IP range for private subnet 1 for workers.  This subnet is accessed via VPN or bastion hosts.
# default: TF_VAR_private_subnet1_dev=10.0.11.0/24
TF_VAR_private_subnet1_dev=insertvalue

# TF_VAR_private_subnet2_dev: The dev IP range for private subnet 2 for workers.  This subnet is accessed via VPN or bastion hosts.
# default: TF_VAR_private_subnet2_dev=10.0.12.0/24
TF_VAR_private_subnet2_dev=insertvalue

# TF_VAR_public_subnet1_dev: The dev IP range for public subnet 1 for public facing  systems.  examples are your VPN access server instance, or bastion host for provisioning other instances in the private network.
# default: TF_VAR_public_subnet1_dev=10.0.201.0/24
TF_VAR_public_subnet1_dev=insertvalue

# TF_VAR_public_subnet2_dev: The dev IP range for public subnet 2 for public facing systems.  examples are your VPN access server instance, or bastion host for provisioning other instances in the private network.
# default: TF_VAR_public_subnet2_dev=10.0.202.0/24
TF_VAR_public_subnet2_dev=insertvalue

# TF_VAR_db_pass: The password to configure and connect with the Deadline DB.  This password will be provisioned during installation.
# eg: TF_VAR_db_pass='MySuperSecretUniqueDeadlineDBPass'
TF_VAR_db_pass=insertvalue

# TF_VAR_firehawk_sync_source: The location based path to the firehawk houdini tools repo.
# This location is pushed to S3, and when a softnas production volume is created it will be pulled to the cloud NFS share.
# It contains TOPS S3 sync functions which Side FX PDG will require to sync assets to and from S3.
# This should also be synced prior to rendering if any changes to assets occur.
# You should have a production NFS share /prod, ensure you also bind an identical locaiton based mount eg: /mycity_prod
# The data at these two paths is identical, but /mycity_prod allows access to data in another location over VPN without confusion, whereas /prod will always refer to the site based NAS for performance, and it is not garunteed to be identical to other locations.
# eg: TF_VAR_firehawk_sync_source=/cairns_prod/assets/openfirehawk-houdini-tools
TF_VAR_firehawk_sync_source=insertvalue

# TF_VAR_openvpn_user: The OpenVPN Access Server username.  Changing this is not currently supported pbut planned as it may require changes to accomodate it with the Open VPN provisioning stage.
# default: TF_VAR_openvpn_user=openvpnas
TF_VAR_openvpn_user=insertvalue

# TF_VAR_openvpn_user_pw: The password for open vpn web ui login.
# Ensure the admin and user passwords are different to the example, but match each other.
# eg: TF_VAR_openvpn_user_pw=MyUniqueSecretVPNPassword
TF_VAR_openvpn_user_pw=insertvalue

# TF_VAR_openvpn_admin_user: The OpenVPN Access Server admin username.  Changing this is not currently supported pbut planned as it may require changes to accomodate it with the Open VPN provisioning stage.
# default: TF_VAR_openvpn_admin_user=openvpnas
TF_VAR_openvpn_admin_user=insertvalue

# TF_VAR_openvpn_admin_pw: The password for open vpn web ui login.
# Ensure the admin and user passwords are different to the example, but match each other.
# eg: TF_VAR_openvpn_admin_pw=MyUniqueSecretVPNPassword
TF_VAR_openvpn_admin_pw=insertvalue

# TF_VAR_user_softnas_pw: The password used to login to softnas at https://{the softnas ip}
# eg: TF_VAR_user_softnas_pw=MySecretSoftnasPAssword
TF_VAR_user_softnas_pw=insertvalue

# TF_VAR_softnas_mode_dev: the ability to switch the performance of the softnas between [low/high] to save costs in dev environment.
# default: TF_VAR_softnas_mode_dev=high 
TF_VAR_softnas_mode_dev=insertvalue

# TF_VAR_softnas_mode_prod: the ability to switch the performance of the softnas between [low/high] to save costs in prod environment.
# default: TF_VAR_softnas_mode_prod=high 
TF_VAR_softnas_mode_prod=insertvalue

# TF_VAR_user_deadlineuser_name: A deadline user account is created to simplify handling of permissions for render nodes and services. Changing this value is not currently supported.
# default: TF_VAR_user_deadlineuser_name=deadlineuser
TF_VAR_user_deadlineuser_name=insertvalue

# TF_VAR_user_deadlineuser_pw: The password for the deadlineuser
# eg: TF_VAR_user_deadlineuser_pw=MyUniquePasswordForDeadlineUser
TF_VAR_user_deadlineuser_pw=insertvalue

# TF_VAR_user_deadlineuser_pw_local: The password for the deadline user ssh access on onsite workstations / render nodes if different.
# eg: TF_VAR_user_deadlineuser_pw_local=MyLocalUserPassForSSH
TF_VAR_user_deadlineuser_pw_local=insertvalue

# TF_VAR_onsite_workstation_ssh_key: the path to the rsa key to copy its id to other local workstations for provisioning.  This is best left at its default value.
# default: TF_VAR_onsite_workstation_ssh_key=/home/vagrant/.ssh/id_rsa
TF_VAR_onsite_workstation_ssh_key=insertvalue

# TF_VAR_pgp_key_path_dev: the path to the pgp key for the dev environment.  the default should be fine.  ensure that unencrypted keys are never commited to version control.  this path should be in git ignore, or build a CI workflow to ensure that keys are encrypted before any commits occur.
# default: TF_VAR_pgp_key_path_dev=/secrets/keys/.pgp-key-dev
TF_VAR_pgp_key_path_dev=insertvalue

# TF_VAR_pgp_key_path_prod: the path to the pgp key for the prod environment.  the default should be fine.  ensure that unencrypted keys are never commited to version control.  This path (/secrets/keys/) should be in git ignore, or build a CI workflow to ensure that keys are encrypted before any commits occur.
# default: TF_VAR_pgp_key_path_prod=/secrets/keys/.pgp-key-prod
TF_VAR_pgp_key_path_prod=insertvalue

# TF_VAR_vagrant_mac_dev: A randomly generated mac address for the dev VM that vagrant will use for the VM's bridged network adapter. Your onsite router will assign an ip based on this mac, and you should ensure that it is static/reserved within your router for a persistent IP address. Unicast mac addresses must not have an odd second digit, and this is required. You can use the script in scripts/random_mac_unicast.sh to generate a mac adress and use it here.  Using a peristent mac addressnis useful for consistent licencing handling.  Dev and Prod VMs must have unique mac adress values or they will not function on the same network.  For this reason, we recomend authorising all licencing on the production vm only, and route all licence requests to the production vm since the production vm should run always and it will be a more stable host.
# eg: TF_VAR_vagrant_mac_dev=4DA1942417BE
TF_VAR_vagrant_mac_dev=insertvalue

# TF_VAR_vagrant_mac_prod: A randomly generated mac address for the prod VM that vagrant will use for the VM's bridged network adapter. Your onsite router will assign an ip based on this mac, and you should ensure that it is static/reserved within your router for a persistent IP address. Unicast mac addresses must not have an odd second digit, and this is required. You can use the script in scripts/random_mac_unicast.sh to generate a mac adress and use it here.  Using a peristent mac addressnis useful for consistent licencing handling.  Dev and Prod VMs must have unique mac adress values or they will not function on the same network.  For this reason, we recomend authorising all licencing on the production vm only, and route all licence requests to the production vm since the production vm should run always and it will be a more stable host.
# eg: TF_VAR_vagrant_mac_prod=4DA1942417BE
TF_VAR_vagrant_mac_prod=insertvalue

# TF_VAR_remote_subnet_cidr: This is the IP range (CIDR notation) of your subnet onsite that the firehawkserver vm will reside in, and that other onsite nodes reside in.
# eg: TF_VAR_remote_subnet_cidr=192.168.29.0/24
# This would be the ip range 192.168.29.0 - 192.168.29.255
TF_VAR_remote_subnet_cidr=insertvalue

# TF_VAR_vpn_cidr_prod:  Open VPN sets up DHCP in this range for every connection in the dev env to provide a unique ip on each side of the VPN for every system. Dont change this from the default for now. In the future it should be unique. Reference for potential ranges https://www.arin.net/reference/research/statistics/address_filters/
# default: TF_VAR_vpn_cidr_prod=172.27.232.0/24
TF_VAR_vpn_cidr_prod=insertvalue

# TF_VAR_vpn_cidr_dev:  Open VPN sets up DHCP in this range for every connection in the dev env to provide a unique ip on each side of the VPN for every system. Dont change this from the default for now. In the future it should be unique. Reference for potential ranges https://www.arin.net/reference/research/statistics/address_filters/
# default: TF_VAR_vpn_cidr_dev=172.17.232.0/24
TF_VAR_vpn_cidr_dev=insertvalue

# TF_VAR_openfirehawkserver_dev: The openfirehawk server vm uses this static ip assigned to the VM.  You should take the auto generated mac address above, and use it to assign a static ip in your router's settings.  That static ip is entered here.
# It will cause issues for your installation if the IP changes within your network and is not static.
# eg: TF_VAR_openfirehawkserver_dev=192.168.29.10
TF_VAR_openfirehawkserver_dev=insertvalue

# TF_VAR_openfirehawkserver_prod: The openfirehawk server vm uses this static ip assigned to the VM, it should be different to the dev environment ip.  You should take the auto generated mac address previously, and use it to assign a static ip in your router's settings.  That static ip is entered here.
# It will cause issues for your installation if the IP changes within your network and is not static.
# eg: TF_VAR_openfirehawkserver_prod=192.168.29.10
TF_VAR_openfirehawkserver_prod=insertvalue

# TF_VAR_houdini_license_server_address_dev: The ip of the houdini licence server used when in a dev environment.  This will normally be the same ip server used in dev and production to not waste licences. So in a dev environment, you will probably need to reference the same houdini licence server in production.  Ideally, the houdini license server should be a seperate vm to the vagrant host for stability reasons but this is currently untested.  It is recomended that the licence server ip is the vagrant production VM until otherwise tested.  A licence server should rarely need to be touched, but updates to infrastructure could disrupt it if located on the firehawkserver vm.
# eg: TF_VAR_houdini_license_server_address_dev=192.168.29.80
TF_VAR_houdini_license_server_address_dev=insertvalue

# TF_VAR_houdini_license_server_address_prod: The ip of the houdini licence server used when in a prod environment.  This will normally be the same ip server used in dev and production to not waste licences. So in a dev environment, you will probably need to reference the same houdini licence server in production.  Ideally, the houdini license server should be a seperate vm to the vagrant host for stability reasons but this is currently untested.  It is recomended that the licence server ip is the vagrant production VM until otherwise tested.  A licence server should rarely need to be touched, but updates to infrastructure could disrupt it if located on the firehawkserver vm.
# eg: TF_VAR_houdini_license_server_address_prod=192.168.29.80
TF_VAR_houdini_license_server_address_prod=insertvalue

# TF_VAR_localnas1_private_ip: The IP adress of the onsite system with NFS shares to mount.  This is normally your onsite NAS ip.
# eg: TF_VAR_localnas1_private_ip=192.168.29.11
TF_VAR_localnas1_private_ip=insertvalue

# TF_VAR_localnas1_mount_path: The name of the production volume path for onsite workstations/nodes.  /prod is a relative path depending on location, so for cloud based nodes, this would usually refer to the softnas production path.  So far only /prod has been tested.
# default: TF_VAR_localnas1_mount_path=/prod
TF_VAR_localnas1_mount_path=insertvalue

# TF_VAR_localnas1_remote_mount_path: The name of the offsite production path if mounted over vpn for onsite workstations/nodes
# default: TF_VAR_localnas1_remote_mount_path=/prod_remote
TF_VAR_localnas1_remote_mount_path=insertvalue

# TF_VAR_localnas1_path_abs: This is the absolute path for the onsite NFS mount at all locations. For example, /mycity_prod should be the same mount path for all locations over vpn.
# eg: TF_VAR_localnas1_path_abs=/mycity_prod
TF_VAR_localnas1_path_abs=insertvalue

# TF_VAR_softnas1_path_abs: This is the absolute path for the cloud NFS mount at all locations. For example, /aws_city_prod should be the same mount path for all locations over VPN.
# eg: TF_VAR_softnas1_path_abs=/aws_city_prod
TF_VAR_softnas1_path_abs=insertvalue

# TF_VAR_firehawk_houdini_tools: The path used in produciton to reference firehawk houdini tools for all locations.  This should normally be in /prod, which is the most performant site based NFS mount for any location.
# default: TF_VAR_firehawk_houdini_tools=/prod/assets/openfirehawk-houdini-tools
TF_VAR_firehawk_houdini_tools=insertvalue

# TF_VAR_network_dev: [public/private].  Determines if the vagrant network is publicly available to other nodes in your location.  If network is set to private, the IP is internal to the host that runs vagrant.  If public, the mac address will be used for dhcp on the network when set to public, and other nodes will be able to reach this system.  this isusually desirable unless testing in an uncontrolled network.
# default: TF_VAR_network_dev=public
TF_VAR_network_dev=insertvalue

# TF_VAR_network_prod: [public/private].  Determines if the vagrant network is publicly available to other nodes in your location.  If network is set to private, the IP is internal to the host that runs vagrant.  If public, the mac address will be used for dhcp on the network when set to public, and other nodes will be able to reach this system.  this isusually desirable unless testing in an uncontrolled network.
# default: TF_VAR_network_prod=public
TF_VAR_network_prod=insertvalue

# TF_VAR_openfirehawkserver_ram_dev: The amount of ram in MB dedicated to the vagrant VM in the dev environment.  Primarily you should consider the requirements of running mongo DB for Deadline on this host.
# default: TF_VAR_openfirehawkserver_ram_dev=6144
TF_VAR_openfirehawkserver_ram_dev=insertvalue

# TF_VAR_openfirehawkserver_ram_prod: The amount of ram in MB dedicated to the vagrant VM in the prod environment.  Primarily you should consider the requirements of running mongo DB for Deadline on this host.
# default: TF_VAR_openfirehawkserver_ram_prod=6144
TF_VAR_openfirehawkserver_ram_prod=insertvalue

# TF_VAR_openfirehawkserver_vcpus_dev: The number of VCPU's dedicated to the vagrant VM used in the dev environment.  Primarily you should consider the requirements of running mongo DB for Deadline on this host.
# default: TF_VAR_openfirehawkserver_vcpus_dev=2
TF_VAR_openfirehawkserver_vcpus_dev=insertvalue

# TF_VAR_openfirehawkserver_vcpus_prod: The number of VCPU's dedicated to the vagrant VM used in the prod environment.  Primarily you should consider the requirements of running mongo DB for Deadline on this host.
# default: TF_VAR_openfirehawkserver_vcpus_prod=2
TF_VAR_openfirehawkserver_vcpus_prod=insertvalue

# eg: TF_VAR_openfirehawkserver_name_dev: The hostname for the firehawkserver in the dev environment.  consider using the Fully Qualified Domain Name for the host as below.  This domain extension may be different for the dev environment to isolate the domain from production and allow AWS to control it via Route 53.
# eg: TF_VAR_openfirehawkserver_name_dev=openfirehawkserverdev.devexample.com
TF_VAR_openfirehawkserver_name_dev=insertvalue

# eg: TF_VAR_openfirehawkserver_name_prod: The hostname for the firehawkserver in the prod environment.  consider using the Fully Qualified Domain Name for the host as below.  This domain extension may be different for the dev environment to isolate the domain from production and allow AWS to control it via Route 53.
# eg: TF_VAR_openfirehawkserver_name_prod=openfirehawkserver.prodexample.com
TF_VAR_openfirehawkserver_name_prod=insertvalue

# TF_VAR_deadline_version: The version of the deadline installer.  Upgrading from 10.0.25.2 will require changes to the way the spot event plugin is updated in the DB.  currently, it is a dictionary with key/value pairs, but in more recent versions of deadline this is now a list of lists with key value pairs. Version 10.0.28.2 is not supported.
# default: TF_VAR_deadline_version=10.0.25.2
TF_VAR_deadline_version=insertvalue

# TF_VAR_usage_based_url: The URL provided by Thinkbox for your Usage Based Licencing credits.  Thinkbox have instructed that you will have to purchase UBL credits from the thinkbox store. If you contact thinkbox after this over email and notify them that this is for use in AWS they will credit this to your AWS account since Deadline is free with AWS!
# eg: TF_VAR_usage_based_url=https://thinkbox.compliance.flexnetoperations.com/instances/KJ32H45K2J3H/request
TF_VAR_usage_based_url=insertvalue

# eg: TF_VAR_usage_based_activation_code: The 16 digit activation code provided by Thinkbox for your usage based licencing.
# eg: TF_VAR_usage_based_activation_code=H58H-J4N6-3H5B-J6N7
TF_VAR_usage_based_activation_code=insertvalue

# TF_VAR_deadline_proxy_root_dir_dev: This is the address and port for clients to reach the Deadline RCS on the openfirehawk server in a dev environment.
# eg: TF_VAR_deadline_proxy_root_dir_dev=192.168.29.10:4433
TF_VAR_deadline_proxy_root_dir_dev=insertvalue

# TF_VAR_deadline_proxy_root_dir_prod: This is the address and port for clients to reach the Deadline Remote Connection Server on the openfirehawk server in a dev environment.
# eg: TF_VAR_deadline_proxy_root_dir_prod=192.168.29.80:4433
TF_VAR_deadline_proxy_root_dir_prod=insertvalue

# TF_VAR_deadline_proxy_certificate: The path to the deadline proxy certificate that will be created.  During deadline installation, the certifcate at this location is generated for remote clients to identify them selves to have access via the Deadline Remote Connection Server.
# default: TF_VAR_deadline_proxy_certificate=/opt/Thinkbox/certs/Deadline10RemoteClient.pfx
TF_VAR_deadline_proxy_certificate=insertvalue

# TF_VAR_deadline_proxy_certificate_password: The password for the TLS certificate used to connect to Deadline Remote Conetion Server. 
# eg: TF_VAR_deadline_proxy_certificate_password="MySecretProxyPassword"
TF_VAR_deadline_proxy_certificate_password=insertvalue

# TF_VAR_aws_region: Your AWS default region.  This should be your nearest AWS datacentre for the best latency/performance.
# default: TF_VAR_aws_region=ap-southeast-2
TF_VAR_aws_region=insertvalue

# TF_VAR_keybase_secret: Your Keybase.io password. You will need to setup a keybase account at keybase.io for PGP decryption of AWS keys from Terraform.  Ensure you configure it on a second device like a mobile for MFA, since keybase installs in VM's will likely be erased during testing, and you will need a second device to authorise again.
# eg: TF_VAR_keybase_secret=MyKeybaseSecretPassword
TF_VAR_keybase_secret=insertvalue

# eg: TF_VAR_aws_access_key_dev: The access key id for your AWS user to use for provisioning with terraform.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during dev until the rollout is stable.
# eg: TF_VAR_aws_access_key_dev=34JB234K5JB34K5JB
TF_VAR_aws_access_key_dev=insertvalue

# eg: TF_VAR_aws_secret_key_dev: The secret key for your AWS user to use for provisioning with terraform.
# eg: TF_VAR_aws_secret_key_dev=32KJB124kjb34kjb2341kjb23JBHLJ
TF_VAR_aws_secret_key_dev=insertvalue

# TF_VAR_aws_access_key_s3user_dev: The access key id for the AWS user with S3 read and write permissions.  Onsite nodes will use these permissions to sync installers and production data to S3 buckets.
# eg: TF_VAR_aws_access_key_s3user_dev=KJ435K3J452K35JB23
TF_VAR_aws_access_key_s3user_dev=insertvalue

# TF_VAR_aws_secret_key_s3user_dev: The secret key for the AWS user with S3 read and write permissions.
# eg: TF_VAR_aws_secret_key_s3user_dev='DH/ASDG4532gsdg434tGDFG'
TF_VAR_aws_secret_key_s3user_dev=insertvalue

# TF_VAR_aws_access_key_prod: The access key id for your AWS user to use for provisioning with terraform in the production environment.  We often use a seperate AWS account for dev and prod to protect the prod environment and have seperate public domains.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during developement until the rollout is stable.
# eg: TF_VAR_aws_access_key_prod=34JB234K5JB34K5JB
TF_VAR_aws_access_key_prod=insertvalue

# TF_VAR_aws_secret_key_prod: The access key id for your AWS user to use for provisioning with terraform in the production environment.  We often use a seperate AWS account for dev and prod to protect the prod environment and have seperate public domains.  Ideally this will not have admin root permissions in the future with the correct permissions set.  Currently we use root permissions during developement until the rollout is stable.
# eg: TF_VAR_aws_secret_key_prod='SH5e5he5EHDGHhr5rddh'
TF_VAR_aws_secret_key_prod=insertvalue

# TF_VAR_aws_access_key_s3user_prod: The access key id for the AWS user with S3 read and write permissions in the prod environment.  Onsite nodes will use these permissions to sync installers and production data to S3 buckets.
# eg: TF_VAR_aws_access_key_s3user_prod=KJ435K3J452K35JB23
TF_VAR_aws_access_key_s3user_prod=insertvalue

# TF_VAR_aws_secret_key_s3user_dev: The secret key for the AWS user with S3 read and write permissions in the prod environment.
# eg: TF_VAR_aws_secret_key_s3user_dev='DH4356DFGDh/drthe5Eg4egbdg4drgsg'
TF_VAR_aws_secret_key_s3user_prod=insertvalue

# TF_VAR_s3_disk_password: Softnas will use this password to encrypt s3 buckets for s3 disks.
# eg: TF_VAR_s3_disk_password=MyEncryptedS3Password
TF_VAR_s3_disk_password=insertvalue

# TF_VAR_s3_disk_size_prod: Default s3 disk size in GB for the prod environment. This is thin provisioned and will not result in charges unless used so you should set it to the largest size you think you might need for output data.
# default: TF_VAR_s3_disk_size_prod=10000
TF_VAR_s3_disk_size_prod=insertvalue

# TF_VAR_s3_disk_size_dev: Default s3 disk size in GB for the dev environment. This is thin provisioned and will not result in charges unless used so you should set it to the largest size you think you might need for output data.
# default: TF_VAR_s3_disk_size_dev=10000
TF_VAR_s3_disk_size_dev=insertvalue

# default: TF_VAR_ebs_disk_size_prod: The size of each EBS disk used on the softnas instance in the production environment.  multiple drives can be used to scale an array up to 20 disks if using Raid 5/6.
# default: TF_VAR_ebs_disk_size_prod=1000
TF_VAR_ebs_disk_size_prod=insertvalue

# default: TF_VAR_ebs_disk_size_dev: The size of each EBS disk used on the softnas instance in the dev environment.  multiple drives can be used to scale an array up to 20 disks if using Raid 5/6.
# default: TF_VAR_ebs_disk_size_dev=200
TF_VAR_ebs_disk_size_dev=insertvalue

# TF_VAR_route_zone_id_dev: The route zone id for the dev domain name in your dev AWS account.  Your aws account will need a public domain name in the account (route 53) in order to assign public routes for DNS.  Once this is established in your account, insert the route zone id here for Terraform to create addresses for systems that are publicly accessible, like vpn and bastion hosts.
# eg: TF_VAR_route_zone_id_dev=432LJN23TLJN3V
TF_VAR_route_zone_id_dev=insertvalue

# TF_VAR_route_zone_id_dev: The route zone id for the prod domain name in your prod AWS account.  This should be unique to the dev account, but it maybe possible to avoid with further developement.  Your aws account will need a public domain name in the account (route 53) in order to assign public routes for DNS.  Once this is established in your account, insert the route zone id here for Terraform to create addresses for systems that are publicly accessible, like vpn and bastion hosts.
# eg: TF_VAR_route_zone_id_dev=KJ2352KJ235LJ
TF_VAR_route_zone_id_prod=insertvalue

# TF_VAR_cert_arn_dev: The ARN for the SSL certificate of your public dev domain in the AWS dev account.  You will have an SSL certificate for any public domain in aws, and this has an ARN associated with it.
# eg: TF_VAR_cert_arn_dev="arn:aws:acm:ap-southeast-2:322531242314:certificate/adsfljnf3-234g-5634-3245-42kjh243kj"
TF_VAR_cert_arn_dev=insertvalue

# TF_VAR_cert_arn_prod: The ARN for the SSL certificate of your public prod domain in the AWS prod account.  You will have an SSL certificate for any public domain in aws, and this has an ARN associated with it.
# eg: TF_VAR_cert_arn_prod="arn:aws:acm:ap-southeast-2:322531242314:certificate/adsfljnf3-234g-5634-3245-42kjh243kj"
TF_VAR_cert_arn_prod=insertvalue

# TF_VAR_public_domain_prod: The public prod domain name in the AWS prod account.  You can purchase a cheap domain in aws with lesser known extensions for testing and use this here. Launched Infrastructure will switch between different domains depending on the staging environment for isolation. Some resources, like licences servers, may exist in a single domain (usually prod), since they often are not dynamic.
# eg: TF_VAR_public_domain_prod=devexample.com
TF_VAR_public_domain_prod=insertvalue

# TF_VAR_public_domain_dev: The public dev domain name in the AWS dev account.  You can purchase a cheap domain in AWS with lesser known extensions for testing and use this here. Launched Infrastructure will switch between different domains depending on the staging environment for isolation. Some resources, like licence servers, may exist in a single domain (usually prod), since they often are not dynamic and cant be moved easily.
# eg: TF_VAR_public_domain_dev=devexample.com
TF_VAR_public_domain_dev=insertvalue

# TF_VAR_key_name_dev: The name of the key pair used in the dev environment. You will create a key pair to access your aws instances, listed here.
# default: TF_VAR_key_name_dev=my_key_pair_dev
TF_VAR_key_name_dev=insertvalue

# TF_VAR_local_key_path_dev: the path to the keypair from within the vagrant VM.
# default: TF_VAR_local_key_path_dev=/secrets/keys/my_key_pair_dev.pem
TF_VAR_local_key_path_dev=insertvalue

# TF_VAR_key_name_prod: The name of the key pair used in the prod environment. You will create a key pair to access your AWS instances, listed here.
# default: TF_VAR_key_name_prod=my_key_pair_prod
TF_VAR_key_name_prod=insertvalue

# TF_VAR_local_key_path_prod: the path to the keypair from within the vagrant VM.
# default: TF_VAR_local_key_path_prod=/secrets/keys/my_key_pair_prod.pem
TF_VAR_local_key_path_prod=insertvalue

# TF_VAR_softnas1_private_ip1_dev: The private ip to install softnas dev with for its first interface.
# When using softnas with high availability and failover, a 2nd interface is used for replication to a 2nd softnas instance.
# default: TF_VAR_softnas1_private_ip1_dev=10.0.11.11
TF_VAR_softnas1_private_ip1_dev=insertvalue

# TF_VAR_softnas1_private_ip2_dev: The private ip to install softnas dev with for its 2nd interface.
# When using softnas with high availability and failover, this 2nd interface is used for replication to a 2nd softnas instance.
# default: TF_VAR_softnas1_private_ip2_dev=10.0.11.12
TF_VAR_softnas1_private_ip2_dev=insertvalue

# TF_VAR_softnas1_private_ip1_prod: The private ip to install softnas prod with for its first interface.
# When using softnas with high availability and failover, a 2nd interface is used for replication to a 2nd softnas instance.
# default: TF_VAR_softnas1_private_ip1_prod=10.0.1.11
TF_VAR_softnas1_private_ip1_prod=insertvalue

# TF_VAR_softnas1_private_ip2_prod: The private ip to install softnas prod with for its 2nd interface.
# When using softnas with high availability and failover, this 2nd interface is used for replication to a 2nd softnas instance.
# default: TF_VAR_softnas1_private_ip2_prod=10.0.1.12
TF_VAR_softnas1_private_ip2_prod=insertvalue

# TF_VAR_softnas_mailserver: mailserver details for softnas notifications
# eg: TF_VAR_softnas_mailserver="mymailserver.mydomain.com"
TF_VAR_softnas_mailserver=insertvalue

# TF_VAR_softnas_smtp_port: mailserver details for softnas notifications
# default: TF_VAR_softnas_smtp_port="26"
TF_VAR_softnas_smtp_port=insertvalue

# TF_VAR_softnas_smtp_username: mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_username="user@mydomain.com"
TF_VAR_softnas_smtp_username=insertvalue

# TF_VAR_softnas_smtp_password: mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_password="MyMailPassword324"
TF_VAR_softnas_smtp_password=insertvalue

# TF_VAR_softnas_smtp_from: mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_from="user@mydomain.com"
TF_VAR_softnas_smtp_from=insertvalue

# TF_VAR_smtp_encryption: mailserver details for softnas notifications
# default: TF_VAR_smtp_encryption="none"
TF_VAR_smtp_encryption=insertvalue

