# update exports on softnas.
- hosts: role_softnas
  remote_user: centos
  become_user: root
  become: true

  vars:
    # when paths are found at these locations, they will be added to exports. otherwise no action will occur.
    # these defaults can be overidden by storing a config in /vagrant/secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml
    exports:
      - path: "/pool1/volume1/"
        pool_name: pool1
        volume_name: volume1
        state: present
        bind: /prod

    import_pool: true

  tasks:
  - name: Check for existance of custom exports in /vagrant/secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml and override default mounts
    stat:
      path: ../secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml
    register: custom_ebs_list
    connection: local

  - name: Override default exports
    include_vars:
      file: ../secrets/{{ envtier }}/ebs-volumes/softnas-ebs-volumes.yaml
    when: custom_ebs_list.stat.exists
    connection: local

  - name: set /etc/exports
    lineinfile:
      path: /etc/exports
      line: "# These mounts are managed in ansible playbook softnas-ebs-disk-update-exports.yaml and only one volume is exported currently for testing"
      backup: yes
    when: import_pool

  - name: ensure after a pool import that the path actually exists.  if so then exports will be updated
    stat:
      path: "/{{ item.pool_name }}/{{ item.volume_name }}/"
    register: volume_mount
    when: import_pool
    with_items:
      - "{{ exports }}"

  - name: inspect dict of results
    debug:
      var: "{{ item }}"
    with_items: "{{ volume_mount.results }}"
    
  - name: check is dir
    debug:
      msg: "/{{ item.item.pool_name }}/{{ item.item.volume_name }}/ exists on softnas instance"
    when: item.stat.exists and item.stat.isdir and import_pool
    with_items: "{{ volume_mount.results }}"

  - name: insert/update block in in /etc/exports for volume
    blockinfile:
      path: /etc/exports
      block: |
        /{{ item.item.pool_name }}/{{ item.item.volume_name }}/ *(async,insecure,no_subtree_check,no_root_squash,rw,nohide)
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.item.path }}"
      state: "{{ item.item.state }}"
    when: item.stat.exists and item.stat.isdir and import_pool
    with_items:
      - "{{ volume_mount.results }}"
    
  - name: update exports
    command: "exportfs -r -a"
    register: update_exports_output
    become: true
    when: import_pool

  - debug:
      msg: "{{ update_exports_output.stdout }}"
    when: import_pool