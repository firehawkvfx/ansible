# This script will query the latest daily or production build with side fx and install it.
# if the file exists in s3, it will be downloaded and installed.  aws cli must be configured with a key that has permission to access s3.
# Do not install the cli on cloud nodes with aws account root permissions!  A seperate user / key with the minimum s3 permissions required is recommended.

# If the file doesn't exist in the s3 bucket, it will be downloaded from side fx, and then pushed to the bucket after install.

# Example install on an aws instance
# ansible-playbook -i ansible/inventory ansible/node-centos-houdini.yaml -v --extra-vars "variable_host=role_workstation_centos hostname=cloud_workstation1.${var.public_domain_name}"
# Example local install on a RHEL 7.6 / CENTOS workstation / render node.
# ansible-playbook -i ansible/inventory ansible/node-centos-houdini.yaml -v --extra-vars "variable_host=workstation.firehawkvfx.com variable_user=deadlineuser hostname=workstation.firehawkvfx.com ansible_become_pass=sompass"

- hosts: "{{ variable_host | default('role_node_centos') }}"
  remote_user: "{{ variable_user | default('centos') }}"
  become: true

  vars:
    ansible_become_pass: "{{ user_deadlineuser_pw_local }}"

  tasks:
  - name: test connection
    debug:
      msg: "connection established"

# sync installers from/to s3 bucket.  any new houdini versions will be pushed from ansible control to the bucket.

- hosts: ansible_control
  remote_user: vagrant
  become: true
  
  vars:
    sync_downloads: false
    bucket: "installers.{{ public_domain }}"

  tasks:
  - debug:
      msg: "Many ports are open for testing.  These should be tightened to minimum necesary advised by SESI"
      
  - name: Allow all access from networks to this host for tops.
    ufw:
      rule: allow
      port: "{{ item.port | replace('-',':')}}"
      src: "{{ item.dest }}"
      proto: tcp
    with_items:
    - { port: '49152-65535', dest: "{{ remote_subnet_cidr }}" }
    - { port: '49152-65535', dest: "{{ vpn_cidr }}" }
    - { port: '49152-65535', dest: "{{ private_subnet1 }}" }
    - { port: '49152-65535', dest: "{{ private_subnet2 }}" } 
    - { port: '49152-65535', dest: "{{ public_subnet1 }}" }
    - { port: '49152-65535', dest: "{{ public_subnet2 }}" }
    # # port for tops callback and relay.
    - { port: '1024', dest: "{{ remote_subnet_cidr }}" }
    - { port: '1024', dest: "{{ vpn_cidr }}" }
    - { port: '1024', dest: "{{ private_subnet1 }}" }
    - { port: '1024', dest: "{{ private_subnet2 }}" } 
    - { port: '1024', dest: "{{ public_subnet1 }}" }
    - { port: '1024', dest: "{{ public_subnet2 }}" }

  - name: Allow all access from networks to this host for tops.
    ufw:
      rule: allow
      port: "{{ item.port | replace('-',':')}}"
      src: "{{ item.dest }}"
      proto: udp
    with_items:
    - { port: '49152-65535', dest: "{{ remote_subnet_cidr }}" }
    - { port: '49152-65535', dest: "{{ vpn_cidr }}" }
    - { port: '49152-65535', dest: "{{ private_subnet1 }}" }
    - { port: '49152-65535', dest: "{{ private_subnet2 }}" } 
    - { port: '49152-65535', dest: "{{ public_subnet1 }}" }
    - { port: '49152-65535', dest: "{{ public_subnet2 }}" }
    # # port for tops callback and relay.
    - { port: '1024', dest: "{{ remote_subnet_cidr }}" }
    - { port: '1024', dest: "{{ vpn_cidr }}" }
    - { port: '1024', dest: "{{ private_subnet1 }}" }
    - { port: '1024', dest: "{{ private_subnet2 }}" } 
    - { port: '1024', dest: "{{ public_subnet1 }}" }
    - { port: '1024', dest: "{{ public_subnet2 }}" }

  - name: ensure an s3 bucket exists to store large files / installers for faster redeployment.
    s3_bucket:
      name: "{{ bucket }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ aws_region }}"
    tags:
      - sync_installers

  - name: ensure the downloads folder is syncronised with the bucket
    s3_sync:
      bucket: "{{ bucket }}"
      file_root: /vagrant/downloads/
      include: "*"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ aws_region }}"
    when: sync_downloads
    tags:
      - sync_installers

- hosts: "{{ variable_host | default('role_node_centos') }}"
  remote_user: "{{ variable_user | default('centos') }}"
  become: true

  vars:
    # the become sudo pass is only relevent for local installation if required on the host specified.
    ansible_become_pass: "{{ user_deadlineuser_pw_local }}"
    houdini_major_version: 18.0
    # houdini_linux_filename (to install from): 
    # when not set to a specific string eg "houdini-17.5.326-linux_x86_64_gcc6.3.tar.gz", instead use the string "auto"
    # specific versions must exist in your s3 bucket for retrieval which you can place there manually, or if you use
    # a version you have installed previously, it should already exist in the bucket.
    #houdini_linux_filename: "auto"
    #houdini_auto_version: True
    # sesi_username: "{{ sesi_username }}"
    # eg: myemaillogin@sidefxwebsite
    # sesi_password: "{{ sesi_password }}"
    # eg: mypassword@sidefxwebiste
    # houdini_build: "{{ houdini_build }}"
    # eg: daily
    download_to_dir: /var/tmp/openfirehawk
    
    variable_user: centos
    bastionip: "{{ groups['bastionip'][0] }}"
    hostname: "node1.{{ public_domain }}"
    skip_packages: false
    skip_install: false
    bucket: "installers.{{ public_domain }}"

  tasks:
  # Open ports for tops schedulers.
  - firewalld:
      port: "{{ item.port }}/udp"
      permanent: yes
      state: enabled
      source: "{{ item.dest }}"
    with_items:
    - { port: '49152-65535', dest: "{{ remote_subnet_cidr }}" }
    - { port: '49152-65535', dest: "{{ vpn_cidr }}" }
    - { port: '49152-65535', dest: "{{ private_subnet1 }}" }
    - { port: '49152-65535', dest: "{{ private_subnet2 }}" } 
    - { port: '49152-65535', dest: "{{ public_subnet1 }}" }
    - { port: '49152-65535', dest: "{{ public_subnet2 }}" }
    # # port for tops callback and relay.
    - { port: '1024', dest: "{{ remote_subnet_cidr }}" }
    - { port: '1024', dest: "{{ vpn_cidr }}" }
    - { port: '1024', dest: "{{ private_subnet1 }}" }
    - { port: '1024', dest: "{{ private_subnet2 }}" } 
    - { port: '1024', dest: "{{ public_subnet1 }}" }
    - { port: '1024', dest: "{{ public_subnet2 }}" }

  - firewalld:
      port: "{{ item.port }}/tcp"
      permanent: yes
      state: enabled
      source: "{{ item.dest }}"
    with_items:
    - { port: '49152-65535', dest: "{{ remote_subnet_cidr }}" }
    - { port: '49152-65535', dest: "{{ vpn_cidr }}" }
    - { port: '49152-65535', dest: "{{ private_subnet1 }}" }
    - { port: '49152-65535', dest: "{{ private_subnet2 }}" } 
    - { port: '49152-65535', dest: "{{ public_subnet1 }}" }
    - { port: '49152-65535', dest: "{{ public_subnet2 }}" }
    # # port for tops callback and relay.
    - { port: '1024', dest: "{{ remote_subnet_cidr }}" }
    - { port: '1024', dest: "{{ vpn_cidr }}" }
    - { port: '1024', dest: "{{ private_subnet1 }}" }
    - { port: '1024', dest: "{{ private_subnet2 }}" } 
    - { port: '1024', dest: "{{ public_subnet1 }}" }
    - { port: '1024', dest: "{{ public_subnet2 }}" }

  - package:
      name: "{{ item }}"
      state: present
    when: not skip_packages
    with_items:
      - mesa-libGLw
      - libXp
      - libXp-devel
      - mesa-libGLU
    tags:
      - packages
    

  - name: install pip
    package:
      name: python-pip
      state: latest
    when: not skip_packages

  - name: install nmap to open port range for tops
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - nmap

  - name: dir permissions on /opt/houdini_install_script
    file:
      path: /opt/houdini_install_script
      state: directory
      mode: 0700
      owner: "{{ variable_user }}"

  - name: dir permissions on "{{ download_to_dir }}"
    file:
      path: "{{ download_to_dir }}"
      state: directory
      mode: 0700
      owner: "{{ variable_user }}"

  - name: Install beautifulsoup4 for web page crawling
    pip:
      name: beautifulsoup4
    when: not skip_packages

  - name: Copy Houdini auto install script to remote host from ansible control.
    copy:
      src: /vagrant/modules/node_centos/modules/houdini_install_script/
      dest: /opt/houdini_install_script/
      directory_mode: yes

  - name: set permissions on houdini_install.py
    file:
      path: /opt/houdini_install_script/houdini_install.py
      mode: 0700

  - name: install houdini for items in list
    include_role:
      name: houdini-install
    loop: "{{ houdini_version_list }}"
    loop_control:
      loop_var: houdini_version_item

  - name: configure houdini.env and deadline for items in list
    include_role:
      name: houdini-env-config
    loop: "{{ houdini_version_list }}"
    loop_control:
      loop_var: houdini_version_item

  - name: configure houdini and deadline config
    include_role:
      name: houdini-deadline-config

- hosts: ansible_control
  become: true

  vars:
    my_password: "{{ user_deadlineuser_pw }}"
    no_extension: "{{ deadline_linux_installers_tar | splitext | first }}"
    basename: "{{ no_extension.split('/')[-1] }}"
    houdini_major_version: 18.0
    
  tasks:
  - name: setup houdini plugin in deadline repository for each major version.  This identical role use occurs in 2 locations - after deadline install and with install of Houdini
    include_role:
      name: 'deadlinedb-houdini-plugins'
    loop: "{{ houdini_major_version_list }}"
    loop_control:
      loop_var: houdini_major_version