- hosts: ansible_control
  remote_user: vagrant
  become: true
  gather_facts: no

  vars:
    bastionip: "{{ groups['bastionip'][0] }}"

  tasks:
  - name: echo bastion public ip
    debug:
      msg: "{{ item }}"
    with_items:
      - "{{ bastionip }}"

  - name: clean known hosts
    shell: "ssh-keygen -f /home/vagrant/.ssh/known_hosts -R {{ bastionip }}"
    become: true
    become_user: vagrant
  
  - name: Write the new ec2 instance host key to known hosts
    shell: "ssh-keyscan -H {{ bastionip }} >> /home/vagrant/.ssh/known_hosts"
    become: true
    become_user: vagrant

- hosts: localhost
  remote_user: vagrant
  become: true
  gather_facts: no

  vars:
    bastionip: "{{ groups['bastionip'][0] }}"
    # need to remove old hosts ssh-keygen -f "/home/vagrant/.ssh/known_hosts" -R 10.0.1.11
    
  tasks:
  - name: clean known hosts
    shell: "ssh-keygen -f /home/vagrant/.ssh/known_hosts -R {{ groups['role_softnas'][0] }}"
    become: true
    become_user: vagrant

  - name: delegate keyscan to add keys from remote subnet via bastion host.
    command: "ssh-keyscan {{ groups['role_softnas'][0] }}"
    register: new_host_fingerprint
    delegate_to: "centos@{{ groups['bastionip'][0] }}"
    #remote_user: centos
  - debug:
      msg: "{{ new_host_fingerprint.stdout_lines }}"

  - name: add keyscan to known hosts
    lineinfile:
      dest: /home/vagrant/.ssh/known_hosts
      line: "{{ item }}"
    with_items: "{{ new_host_fingerprint.stdout_lines }}"
    become: true
    become_user: vagrant

- hosts: role_softnas
  remote_user: centos
  become: true

  vars:
    bastionip: "{{ groups['bastionip'][0] }}"

  tasks:
  - name: ensure file exists
    copy:
      content: ""
      dest: /tmp/updatetype
      force: no

# these packages are required to pass an encrypted string via commandline into a user pass.
  - name: install mkpasswd
    package:
      name: expect
      state: present

  - name: install pip
    package:
      name: python-pip
      state: present

  - name: install pexpect
    pip:
      name: pexpect
    become: yes
    
  - name: install passlib
    pip:
      name: passlib
    become: yes

  - name: set user pass
    expect:
      command: passwd softnas
      responses:
        (?i)password: "{{ user_softnas_pw }}"
        (?i)Retype new password: "{{ user_softnas_pw }}"

  - name: ensure file exists
    copy:
      content: ""
      dest: /var/tmp/ansible_log
      force: no

  - name: init authorized_keys
    copy:
      content: ""
      dest: /root/.ssh/authorized_keys
      force: no
    become: true

  # tasks file for roles/init-host
  - name: change hostname
    hostname:
      name: "nas1.firehawkvfx.com"
      
  - name: add myself to /etc/hosts
    lineinfile:
      dest: /etc/hosts
      regexp: '^127\.0\.0\.1[ \t]+localhost'
      line: "127.0.0.1 localhost nas1.firehawkvfx.com"
      state: present

  - name: Set hostname var in bash profile
    lineinfile:
      path: /root/.bash_profile
      line: 'export HOSTNAME=nas1.firehawkvfx.com'
      

  - name: insert marker start
    lineinfile:
      path: /var/www/softnas/config/monitoring.ini
      insertafter: "^#?# Valid values for SMTP_ENCRYPTION are SSLV2, SSLV3 and TLSV1"
      line: "# BEGIN ANSIBLE MANAGED BLOCK"
      backup: yes

  - name: insert marker end
    lineinfile:
      path: /var/www/softnas/config/monitoring.ini
      insertafter: 'SMTP_ENCRYPTION'
      line: "# END ANSIBLE MANAGED BLOCK"
      create: true
 
  - name: insert/update email block in /var/www/softnas/config/monitoring.ini
    blockinfile:
      path: /var/www/softnas/config/monitoring.ini
      backup: yes
      #marker: "#### ANSIBLE MANAGED BLOCK ####"
      #insertafter: "<body>"
      content: |

        NOTIFICATION_EMAIL="queglay@gmail.com"
        USE_EXT_SMTP="smtp-relay.gmail.com"
        SMTP_MAILSERVER=""
        SMTP_PORT="587"
        SMTP_USERNAME=""
        SMTP_PASSWORD=""
        SMTP_ENCRYPTION="tlsv1"

  - name: check if settings file exists
    stat: 
      path: /var/www/softnas/config/general_settings.ini
    register: general_settings

  - name: copy template file
    copy:
      remote_src: true
      src: /var/www/softnas/config/general_settings.ini.prototype
      dest: /var/www/softnas/config/general_settings.ini
    when: not general_settings.stat.exists

  - name: mail settings server in /var/www/softnas/config/general_settings.ini
    lineinfile:
      path: /var/www/softnas/config/general_settings.ini
      regexp: 'smtp_mailserver[ \t]+=[ \t]+'
      line: smtp_mailserver = smtp-relay.gmail.com
      state: present
      create: true

  - name: mail settings server in /var/www/softnas/config/general_settings.ini
    lineinfile:
      path: /var/www/softnas/config/general_settings.ini
      regexp: 'smtp_port[ \t]+=[ \t]+'
      line: smtp_port = 587
      state: present
      create: true

  - name: install nmap
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - nmap

  - command: "nmap -p {{ item.port }} {{ item.dest }}"
    register: nmap_result
    with_items:
      - { port: '80', dest: 'softnas.com' }
      - { port: '443', dest: 'softnas.com' }
      - { port: '80', dest: 'www.softnas.com' }
      - { port: '443', dest: 'www.softnas.com' }
      - { port: '80', dest: 'mirror.softnas.com' }
      - { port: '443', dest: 'mirror.softnas.com' }

  - debug:
      msg: "{{ item.stdout }}"
    with_items:
      - "{{ nmap_result.results }}"
    when: debug > 0

  - name: Uncomment line from /etc/ssh/sshd_config
    lineinfile:
      path: "/etc/sysconfig/nfs"
      regexp: '^#\s*MOUNTD_PORT=892.*$'
      line: 'MOUNTD_PORT=892'
  
  # # these services need to be restarted if a reboot/update wasn't occuring and changes to volummes are made
  # - service:
  #     name: "{{ item }}"
  #     state: restarted
  #   with_items:
  #     - nfs
  #     - softnas
  #     - monit
    


  - name: login and ack agreement
    #command: "softnas-cmd login softnas {{ user_softnas_pw }} && softnas-cmd ackagreement"
    shell: |
      softnas-cmd login softnas {{ user_softnas_pw }} && softnas-cmd ackagreement
    register: softnas_login
  - name: login and ack agreement
    debug:
      var: softnas_login.stdout.split('\n')